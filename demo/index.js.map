{"version":3,"sources":["../webpack/universalModuleDefinition","../webpack/bootstrap","../external \"react\"","lib/helpers.js","lib/StyleManager.js","lib/properties/base.js","lib/properties/direction.js","lib/properties/align.js","lib/properties/justifyContent.js","lib/properties/alignItems.js","lib/properties/alignSelf.js","lib/properties/alignContent.js","lib/properties/fill.js","lib/properties/wrap.js","lib/properties/grow.js","lib/properties/shrink.js","lib/properties/basis.js","lib/properties/gap.js","lib/properties/layoutGap.js","lib/properties/spacing.js","lib/properties/show.js","lib/properties/hide.js","lib/properties/size.js","lib/properties/minSize.js","lib/properties/maxSize.js","lib/properties/index.js","lib/index.js","lib/Flex.js","demo/components/Code.js","demo/examples/Direction.js","demo/examples/Align.js","demo/examples/Wrap.js","demo/examples/Grow.js","demo/examples/Shrink.js","demo/examples/Basis.js","demo/logo.svg","demo/examples/AlignSelf.js","demo/examples/JustifyContent.js","demo/examples/AlignItems.js","demo/examples/AlignContent.js","demo/examples/Gap.js","demo/App.js","demo/registerServiceWorker.js","demo/index.js","../external \"react-dom\""],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__33__","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","isObj","Array","isArray","getId","nanoid","lib_StyleManager","StyleManager","classCallCheck","this","breakpoints","xs","es","gtEs","sm","gtSm","md","gtMd","lg","xl","_rules","Map","_sheetId","style","document","createElement","id","head","Error","appendChild","_sheet","disabled","_style","parentNode","removeChild","rules","out","forEach","rule","concat","join","_this","_clearSheet","breakpoint","mediaRules","_getMediaRules","unshift","mRule","insertRule","props","breakpointRule","set","_this2","keys","_addRule","_updateSheet","_this3","bRule","bkey","delete","getElementById","sheet","Property","cssProperties","arguments","undefined","direction","align","config","mainAxis","crossAxis","split","_config$split","_config$split2","slicedToArray","_config","justifyContent","alignItems","alignSelf","alignContent","fill","wrap","grow","shrink","basis","gap","layoutGap","spacing","margin","padding","outerSpace","innerSpace","Spacing","getProperty","getValue","map","show","inline","propertyValue","hide","Size","_Property","possibleConstructorReturn","getPrototypeOf","inherits","createClass","width","height","size","minSize","maxSize","properties","Flex","state","children","React","Children","child","type","cloneElement","addRule","selector","declaration","addRules","cssProps","prop","getValues","styleManager","setState","nextProps","nextState","nextContext","format","buildRuleSet","className","addClass","_this$props","objectWithoutProperties","external_react_default","assign","getClass","getElProps","Component","Code","lines","minWhitespaces","reduce","minTabs","line","whitespaces","match","trim","prism","language","coy","Direction","external_react_","lib","toConsumableArray","u","components_Code","ITEM_SPACING","MainAxis","CrossAxis","BothAxis","Align","Align_MainAxis","Align_CrossAxis","Align_BothAxis","DirectionRow","DirectionColumn","Wrap","Wrap_DirectionRow","Wrap_DirectionColumn","Grow","Grow_DirectionRow","Grow_DirectionColumn","Shrink","Shrink_DirectionRow","Shrink_DirectionColumn","Basis","Basis_DirectionRow","_extends","target","source","logo_ref","stroke","fillRule","logo_SvgLogo","viewBox","minHeight","AlignSelf","AlignSelf_CrossAxis","Example","_ref","overflow","JustifyContent","JustifyContent_Example","AlignItems","AlignItems_Example","AlignContent","AlignContent_Example","Gap","Gap_DirectionRow","Gap_DirectionColumn","App","display","examples_Direction","examples_JustifyContent","examples_AlignItems","examples_AlignSelf","examples_Wrap","examples_AlignContent","examples_Basis","examples_Grow","examples_Shrink","examples_Align","examples_Gap","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_demo_App","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"react-dom\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"react-dom\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"react\"), require(\"react-dom\")) : factory(root[\"react\"], root[\"react-dom\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__33__) {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/react-flex/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([39,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","// @flow\nimport nanoid from 'nanoid';\n\nexport const isObj = (value: any) => {\n  return typeof value === 'object' && !Array.isArray(value) && value !== null;\n};\n\nexport const isArr = (value: any) => {\n  return Array.isArray(value);\n};\n\nexport const getId = () => {\n  return nanoid(6);\n};\n","// @flow\nimport { getId, isObj } from './helpers';\n\ntype Breakpoint =\n  | 'xs'\n  | 'es'\n  | 'gtEs'\n  | 'sm'\n  | 'gtSm'\n  | 'md'\n  | 'gtMd'\n  | 'lg'\n  | 'xl';\n\ntype Breakpoints = {\n  xs?: any,\n  es?: any,\n  sm?: any,\n  md?: any,\n  lg?: any,\n  es?: any,\n  xl?: any,\n};\ntype BreakpointRules = {\n  xs?: string[],\n  es?: string[],\n  sm?: string[],\n  md?: string[],\n  lg?: string[],\n  es?: string[],\n  xl?: string[],\n};\ntype RulesMap = Map<string, string[]>;\ntype MediaRulesMap = Map<string, RulesMap>;\n\nclass StyleManager {\n  breakpoints: Breakpoints = {\n    xs: `@media screen and (min-width : 0)`,\n    es: `@media screen and (max-width : 575px)`,\n    gtEs: `@media screen and (min-width : 576px)`,\n    sm: `@media screen and (min-width : 576px) and (max-width : 767px)`,\n    gtSm: `@media screen and (min-width : 768px)`,\n    md: `@media screen and (min-width : 768px) and (max-width : 991px)`,\n    gtMd: `@media screen and (min-width : 992px)`,\n    lg: `@media screen and (min-width : 992px) and (max-width : 1199px)`,\n    xl: `@media screen and (min-width : 1200px)`,\n  };\n\n  _sheetId: string;\n\n  _rules: MediaRulesMap = new Map();\n\n  constructor() {\n    this._sheetId = getId();\n    const style = document.createElement('style');\n    style.id = this._sheetId;\n    if (document.head) {\n      document.head.appendChild(style);\n    } else {\n      throw Error('document.head is not available');\n    }\n  }\n\n  get _sheet() {\n    const style = document.getElementById(this._sheetId);\n    // $FlowFixMe\n    return style.sheet;\n  }\n\n  get _style() {\n    return document.getElementById(this._sheetId);\n  }\n\n  _clearSheet() {\n    // $FlowFixMe\n    this._sheet.disabled = true;\n    // $FlowFixMe\n    this._style.parentNode.removeChild(this._style);\n    const style = document.createElement('style');\n    style.id = this._sheetId;\n    // $FlowFixMe\n    document.head.appendChild(style);\n  }\n\n  _getMediaRules(rules: RulesMap): string {\n    const out = [];\n    rules.forEach((rule, key) => {\n      out.push(`.flex-${key}{ ${rule.join(' ')} }`);\n    });\n    return out.join('\\n');\n  }\n\n  _updateSheet() {\n    this._clearSheet();\n    const rules = [];\n    this._rules.forEach((rule, key) => {\n      if (rule) {\n        const breakpoint = this.breakpoints[key];\n        const mediaRules = this._getMediaRules(rule);\n        if (key !== 'xs' && breakpoint) {\n          rules.unshift(`${breakpoint} { ${mediaRules} }`);\n        } else {\n          rule.forEach((mRule, key) => {\n            rules.push(`.flex-${key}{ ${mRule.join(' ')} }`);\n          });\n        }\n      }\n    });\n\n    // console.log(rules);\n    rules.forEach(rule => {\n      this._sheet.insertRule(rule);\n    });\n  }\n\n  _addRule(id: string, breakpoint: string, props: string[]) {\n    let breakpointRule = this._rules.get(breakpoint);\n    if (breakpointRule) {\n      breakpointRule.set(id, props);\n    } else {\n      breakpointRule = new Map();\n      breakpointRule.set(id, props);\n    }\n    this._rules.set(breakpoint, breakpointRule);\n  }\n\n  addClass(id: string, rules: BreakpointRules) {\n    const breakpoints = Object.keys(rules);\n    breakpoints.forEach(breakpoint => {\n      const rule = rules[breakpoint];\n      if (rule) {\n        this._addRule(id, breakpoint, rule);\n      }\n    });\n\n    this._updateSheet();\n\n    return `flex-${id}`;\n  }\n\n  removeClass(id: string) {\n    this._rules.forEach((rule, key) => {\n      if (rule) {\n        if (isObj(rule)) {\n          rule.forEach((bRule, bkey) => {\n            if (id === bkey) {\n              rule.delete(key);\n            }\n          });\n        } else {\n          if (id === key) {\n            this._rules.delete(key);\n          }\n        }\n      }\n    });\n\n    this._updateSheet();\n  }\n}\n\nexport default new StyleManager();\nexport type { Breakpoints, Breakpoint };\n","// @flow\nimport { isObj } from '../helpers';\n\nexport default class Property {\n  name: string;\n  cssProperties: [];\n\n  constructor(name, cssProperties) {\n    this.name = name;\n    this.cssProperties = cssProperties;\n  }\n\n  format(property: string | Object): Object {\n    if (isObj(property)) {\n      return property;\n    }\n\n    return { xs: property || null };\n  }\n\n  getValues(config: any = null): string[] | null {\n    return [config];\n  }\n}\n","// @flow\nimport { isObj } from '../helpers';\nimport Property from './base';\n\nclass Direction extends Property {\n  format(property: string | Object) {\n    if (isObj(property)) {\n      return property;\n    }\n\n    return { xs: property || 'row' };\n  }\n}\n\nexport const direction = new Direction('direction', ['flex-direction']);\n","// @flow\nimport Property from './base';\n\nexport type MainAxisAlign =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-around'\n  | 'space-evenly';\n\nexport type CrossAxisAlign =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'baseline'\n  | 'stretch';\n\nclass Align extends Property {\n  getValues(config: mixed): any[] {\n    let mainAxis = null;\n    let crossAxis = null;\n    if (typeof config === 'undefined') {\n      return [mainAxis, crossAxis];\n    }\n    if (typeof config === 'string') {\n      if (config.split(' ').length > 1) {\n        [mainAxis, crossAxis] = config.split(' ');\n        mainAxis =\n          mainAxis === 'start' || mainAxis === 'end'\n            ? `flex-${mainAxis}`\n            : mainAxis;\n        crossAxis =\n          crossAxis === 'start' || crossAxis === 'end'\n            ? `flex-${crossAxis}`\n            : crossAxis;\n      } else {\n        mainAxis =\n          config === 'start' || config === 'end' ? `flex-${config}` : config;\n        crossAxis =\n          config === 'start' || config === 'end' ? `flex-${config}` : config;\n      }\n\n      return [mainAxis, crossAxis];\n    }\n    if (typeof config === Array) {\n      //$FlowFixMe\n      [mainAxis, crossAxis] = config;\n      mainAxis =\n        mainAxis === 'start' || mainAxis === 'end'\n          ? `flex-${mainAxis}`\n          : mainAxis;\n      crossAxis =\n        crossAxis === 'start' || crossAxis === 'end'\n          ? `flex-${crossAxis}`\n          : crossAxis;\n    }\n\n    return [mainAxis, crossAxis];\n  }\n}\n\nexport const align = new Align('align', ['justify-content', 'align-items']);\n","// @flow\nimport Property from './base';\n\nexport type JustifyContent =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'space-between'\n  | 'space-between'\n  | 'space-evenly';\n\nclass JustifyContentProp extends Property {\n  getValues(config: JustifyContent): [string | null, null] {\n    let justifyContent = null;\n    if (typeof config === 'undefined') {\n      return [justifyContent];\n    }\n\n    justifyContent =\n      config === 'start' || config === 'end' ? `flex-${config}` : config;\n    return [justifyContent];\n  }\n}\n\nexport const justifyContent = new JustifyContentProp('justifyContent', [\n  'justify-content',\n]);\n","// @flow\nimport Property from './base';\n\nexport type AlignItems = 'start' | 'end' | 'center' | 'baseline' | 'stretch';\n\nclass AlignItemsProp extends Property {\n  getValues(config: AlignItems): [string | null] {\n    let alignItems = null;\n    if (typeof config === 'undefined') {\n      return [alignItems];\n    }\n\n    alignItems =\n      config === 'start' || config === 'end' ? `flex-${config}` : config;\n    return [alignItems];\n  }\n}\n\nexport const alignItems = new AlignItemsProp('alignItems', [\n  'align-items',\n]);\n","// @flow\nimport Property from './base';\n\nclass AlignSelfProp extends Property {\n  getValues(config: mixed): string[] {\n    let alignSelf = null;\n\n    if (typeof config === 'string') {\n      alignSelf =\n        config === 'start' || config === 'end' ? `flex-${config}` : config;\n      return [alignSelf];\n    }\n\n    return [];\n  }\n}\n\nexport const alignSelf = new AlignSelfProp('alignSelf', ['align-self']);\n","// @flow\nimport { isObj } from '../helpers';\nimport Property from './base';\nimport type { JustifyContent } from './justifyContent';\n\nexport type AlignContent =\n  | 'auto'\n  | 'start'\n  | 'end'\n  | 'space-between'\n  | 'space-around'\n  | 'stretch';\n\nexport const getAlignContentDeclaration = (config: AlignContent): [string] => {\n  let alignContent = 'auto';\n  if (typeof config === 'undefined') {\n    return [alignContent];\n  }\n\n  alignContent =\n    config === 'start' || config === 'end' ? `flex-${config}` : config;\n  return [alignContent];\n};\n\nexport const getAlignContent = (align: AlignContent | Object) => {\n  if (isObj(align)) {\n    return align;\n  }\n\n  return { xs: align || 'auto' };\n};\n\nclass AlignContentProp extends Property {\n  getValues(config: AlignContent): [string | null, null] {\n    let alignContent = null;\n    if (typeof config === 'undefined') {\n      return [alignContent];\n    }\n\n    alignContent =\n      config === 'start' || config === 'end' ? `flex-${config}` : config;\n    return [alignContent];\n  }\n}\n\nexport const alignContent = new AlignContentProp('alignContent', [\n  'align-content',\n]);\n","// @flow\nimport Property from './base';\n\nclass Fill extends Property {\n  getValues(config: boolean): [string | null] {\n    let fill = null;\n    if (typeof config === 'undefined') {\n      return [fill];\n    }\n\n    return config ? ['1 1 100%'] : [null];\n  }\n}\n\nexport const fill = new Fill('fill', ['flex']);\n","// @flow\nimport { isObj } from '../helpers';\nimport Property from './base';\nimport type { JustifyContent } from './justifyContent';\n\nexport const getWrapDeclaration = (config: boolean): [string] => {\n  let wrap = 'nowrap';\n  if (typeof config === 'undefined') {\n    return [wrap];\n  }\n\n  return wrap ? ['wrap'] : ['nowrap'];\n};\n\nexport const getWrap = (wrap: boolean | Object) => {\n  if (isObj(wrap)) {\n    return wrap;\n  }\n\n  return { xs: wrap };\n};\n\nclass Wrap extends Property {\n  getValues(config: JustifyContent): [string | null] {\n    if (typeof config === 'undefined') {\n      return [wrap];\n    }\n\n    return config ? ['wrap'] : [null];\n  }\n}\n\nexport const wrap = new Wrap('wrap', ['flex-wrap']);\n","// @flow\nimport Property from './base';\n\nexport const grow = new Property('grow', ['flex-grow']);\n","// @flow\nimport Property from './base';\n\nexport const shrink = new Property('shrink', ['flex-shrink']);\n","// @flow\nimport Property from './base';\n\nclass Basis extends Property {\n  getValues(config: string | number): [string | null] {\n    let basis = null;\n    if (typeof config === 'undefined') {\n      return [basis];\n    }\n    if (typeof config === 'number') {\n      basis = `${config}%`;\n      return [basis];\n    }\n    if (typeof config === 'string') {\n      basis = config;\n      return [basis];\n    }\n\n    return [basis];\n  }\n}\n\nexport const basis = new Basis('basis', ['flex-basis']);\n","// @flow\nimport Property from './base';\n\nclass Gap extends Property {\n  getValues(config: number): [string | null, string | null] {\n    if (config) {\n      let property = `solid ${config / 2}px transparent`;\n      let property1 = `border-box`;\n\n      return [property, property1];\n    }\n\n    return [null, null];\n  }\n}\n\nexport const gap = new Gap('gap', ['border', 'box-sizing']);\n","// @flow\nimport Property from './base';\n\nclass LayoutGap extends Property {\n  getValues(config: number): [string | null, string | null] {\n    if (config) {\n      let property = `solid ${config / 2}px transparent`;\n      let property1 = `border-box`;\n\n      return [property, property1];\n    }\n\n    return [null, null];\n  }\n}\n\nexport const layoutGap = new LayoutGap('layoutGap', ['border', 'box-sizing']);\n","// @flow\nimport Property from './base';\n\nclass Spacing extends Property {\n  static getValue(config: number | string) {\n    return `${typeof config === 'number' ? `${config}px` : config}`;\n  }\n\n  static getProperty(config: string[]) {\n    if (config.length === 2 || config.length === 4) {\n      return `${config.map(value => Spacing.getValue(value)).join(' ')}`;\n    } else {\n      return null;\n    }\n  }\n\n  getValues(\n    config: string | number | Object[]\n  ): [string | null, string | null] {\n    let margin = null;\n    let padding = null;\n    if (typeof config === 'undefined') {\n      return [margin, padding];\n    }\n    if (typeof config === 'number') {\n      margin = `${config}px`;\n      return [margin, padding];\n    }\n    if (typeof config === 'string') {\n      margin = config;\n      return [margin, padding];\n    }\n    const [outerSpace, innerSpace] = config;\n    padding = Array.isArray(innerSpace)\n      ? Spacing.getProperty(innerSpace)\n      : Spacing.getValue(innerSpace);\n    margin = Array.isArray(outerSpace)\n      ? Spacing.getProperty(outerSpace)\n      : Spacing.getValue(outerSpace);\n    return [margin, padding];\n  }\n}\n\nexport const spacing = new Spacing('spacing', ['margin', 'padding']);\n","// @flow\nimport Property from './base';\nimport { isObj } from '../helpers';\n\nexport const getDisplay = (inline: boolean = false, hide: boolean = false) => {\n  return hide ? 'display:none;' : `display:${inline ? 'inline-flex' : 'flex'};`;\n};\n\nclass Show extends Property {\n  format(property: string | Object) {\n    if (isObj(property)) {\n      return property;\n    }\n\n    if (typeof property === 'undefined') {\n      return { xs: true };\n    }\n\n    return { xs: property };\n  }\n\n  getValues(config: Object): string[] {\n    const { inline, propertyValue } = config;\n    const display = propertyValue\n      ? `${inline ? 'inline-flex' : 'flex'};`\n      : 'none;';\n    return [display];\n  }\n}\n\nexport const show = new Show('show', ['display']);\n","// @flow\nimport Property from './base';\nimport { isObj } from '../helpers';\n\nexport const getDisplay = (inline: boolean = false, hide: boolean = false) => {\n  return hide ? 'display:none;' : `display:${inline ? 'inline-flex' : 'flex'};`;\n};\n\nclass Hide extends Property {\n  format(property: string | Object) {\n    if (isObj(property)) {\n      return property;\n    }\n\n    if (typeof property === 'undefined') {\n      return { xs: false };\n    }\n\n    return { xs: property };\n  }\n\n  getValues(config: Object): string[] {\n    const { inline, propertyValue } = config;\n    const display = !propertyValue\n      ? `${inline ? 'inline-flex' : 'flex'};`\n      : 'none;';\n    return [display];\n  }\n}\n\nexport const hide = new Hide('hide', ['display']);\n","// @flow\nimport Property from './base';\n\nexport type Width = string | number;\nexport type Height = string | number;\n\nexport class Size extends Property {\n  getValues(config: mixed): any[] {\n    let width = null;\n    let height = null;\n    if (typeof config === 'undefined') {\n      return [width, height];\n    }\n    if (typeof config === 'number') {\n      width = config + 'px';\n      height = config + 'px';\n      return [width, height];\n    }\n    if (typeof config === 'string') {\n      if (config.split(' ').length > 1) {\n        [width, height] = config.split(' ');\n      } else {\n        width = config;\n        height = config;\n      }\n\n      return [width, height];\n    }\n\n    if (Array.isArray(config)) {\n      //$FlowFixMe\n      [width, height] = config;\n      if (typeof width === 'number') {\n        width = width + 'px';\n      }\n      if (typeof height === 'number') {\n        height = height + 'px';\n      }\n    }\n\n    return [width, height];\n  }\n}\n\nexport const size = new Size('size', ['width', 'height']);\n","// @flow\nimport { Size } from './size';\n\nexport const minSize = new Size('minSize', ['min-width', 'min-height']);\n","// @flow\nimport { Size } from './size';\n\nexport const maxSize = new Size('maxSize', ['max-width', 'max-height']);\n","import { direction } from './direction';\nimport { align } from './align';\nimport { justifyContent } from './justifyContent';\nimport { alignItems } from './alignItems';\nimport { alignSelf } from './alignSelf';\nimport { alignContent } from './alignContent';\nimport { fill } from './fill';\nimport { wrap } from './wrap';\nimport { grow } from './grow';\nimport { shrink } from './shrink';\nimport { basis } from './basis';\nimport { gap } from './gap';\nimport { layoutGap } from './layoutGap';\nimport { spacing } from './spacing';\nimport { show } from './show';\nimport { hide } from './hide';\nimport { size } from './size';\nimport { minSize } from './minSize';\nimport { maxSize } from './maxSize';\n\nexport default [\n  direction,\n  align,\n  justifyContent,\n  alignItems,\n  alignSelf,\n  alignContent,\n  fill,\n  wrap,\n  grow,\n  shrink,\n  basis,\n  gap,\n  layoutGap,\n  spacing,\n  show,\n  hide,\n  size,\n  minSize,\n  maxSize,\n];\n","import Flex from './Flex';\n\nexport default Flex;\n","// @flow\nimport React, { Component } from 'react';\nimport { getId } from './helpers';\nimport type { Breakpoint } from './StyleManager';\nimport styleManager from './StyleManager';\nimport properties from './properties';\nimport type { AlignContent } from './properties/alignContent';\nimport type { JustifyContent } from './properties/justifyContent';\nimport type { AlignItems } from './properties/alignItems';\nimport type { AlignSelf } from './properties/alignSelf';\nimport type { CrossAxisAlign, MainAxisAlign } from './properties/align';\nimport type { Height, Width } from './properties/size';\n\ntype Props = {\n  children: React$Element<any>,\n  className?: string,\n  inline?: boolean | { [key: Breakpoint]: boolean },\n  direction?: string | { [key: Breakpoint]: string },\n  justifyContent?: JustifyContent | { [key: Breakpoint]: JustifyContent },\n  alignItems?: AlignItems | { [key: Breakpoint]: AlignItems },\n  alignSelf?: AlignSelf | { [key: Breakpoint]: AlignContent },\n  alignContent?: AlignItems | { [key: Breakpoint]: AlignItems },\n  wrap?: boolean | { [key: Breakpoint]: boolean },\n  grow?: number | { [key: Breakpoint]: number },\n  shrink?: number | { [key: Breakpoint]: number },\n  basis?: string | number | { [key: Breakpoint]: string | number },\n  spacing?: string | { [key: Breakpoint]: string },\n  gap?: number | { [key: Breakpoint]: number },\n  fill?: boolean | { [key: Breakpoint]: boolean },\n  align?:\n    | MainAxisAlign\n    | [MainAxisAlign, CrossAxisAlign]\n    | { [key: Breakpoint]: MainAxisAlign | [MainAxisAlign, CrossAxisAlign] },\n  size?:\n    | string\n    | number\n    | [Width, Height]\n    | { [key: Breakpoint]: string | number | [Width, Height] },\n  minSize?:\n    | string\n    | number\n    | [Width, Height]\n    | { [key: Breakpoint]: string | number | [Width, Height] },\n  maxSize?:\n    | string\n    | number\n    | [Width, Height]\n    | { [key: Breakpoint]: string | number | [Width, Height] },\n  show?: boolean | { [key: Breakpoint]: boolean },\n  hide?: boolean | { [key: Breakpoint]: boolean },\n};\n\ntype State = {\n  id: string,\n  rules: Object,\n};\n\nclass Flex extends Component<Props, State> {\n  state = {\n    id: '',\n    rules: {},\n  };\n  children = React.Children.map(this.props.children, child => {\n    if (child && child.type && child.type.name === 'Flex') {\n      return React.cloneElement(child, {\n        layoutGap: this.props.gap,\n      });\n    }\n    return child;\n  });\n\n  componentWillMount(): void {\n    if (this.props.show && this.props.hide) {\n      throw Error('show & hide can not be combined');\n    }\n    const id = getId();\n    this.setState({ id: id });\n  }\n\n  componentWillUnmount(): void {\n    //\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State, nextContext: any) {\n    return true;\n  }\n\n  addRule = (selector: string, declaration: string) => {\n    const { rules } = this.state;\n\n    if (rules[selector]) {\n      rules[selector].push(declaration);\n    } else {\n      rules[selector] = [];\n      rules[selector].push(declaration);\n    }\n  };\n\n  addRules = (\n    cssProps: string[],\n    prop: { [key: Breakpoint]: string },\n    getValues: ?(props: Object) => string[] | null,\n  ) => {\n    const breakpoints = Object.keys(styleManager.breakpoints);\n    breakpoints.forEach(breakpoint => {\n      if (prop[breakpoint] || typeof prop[breakpoint] === 'boolean') {\n        if (getValues) {\n          const values = getValues(prop[breakpoint]);\n          values.forEach((value, i) => {\n            if (value) {\n              this.addRule(breakpoint, `${cssProps[i]}: ${value};`);\n            }\n          });\n        } else {\n          this.addRule(breakpoint, `${cssProps[0]}: ${prop[breakpoint]};`);\n        }\n      }\n    });\n  };\n\n  buildRuleSet() {\n    // this.addRule('xs', getDisplay(this.props.inline));\n\n    properties.forEach(property => {\n      if (this.props[property.name]) {\n        this.addRules(\n          property.cssProperties,\n          property.format(this.props[property.name]),\n          propertyValue => {\n            const isDisplay = property.cssProperties[0] === 'display';\n            if (isDisplay) {\n              const inline = this.props.inline;\n              return property.getValues({ inline, propertyValue });\n            }\n            return property.getValues(propertyValue);\n          },\n        );\n      } else {\n        const isShow = property.name === 'show';\n        if (isShow) {\n          this.addRules(\n            property.cssProperties,\n            property.format(this.props[property.name]),\n            propertyValue => {\n              const inline = this.props.inline;\n              return property.getValues({ inline, propertyValue });\n            },\n          );\n        }\n      }\n    });\n  }\n\n  getClass() {\n    const { id } = this.state;\n    this.buildRuleSet();\n    const prefix = 'flex';\n    const className = styleManager.addClass(id, this.state.rules);\n    return `${prefix} ${className} ${this.props.className || ''}`;\n  }\n\n  getElProps() {\n    const {\n      children,\n      direction,\n      justifyContent,\n      alignItems,\n      align,\n      alignSelf,\n      alignContent,\n      spacing,\n      wrap,\n      grow,\n      gap,\n      layoutGap,\n      basis,\n      shrink,\n      fill,\n      size,\n      maxSize,\n      minSize,\n      show,\n      hide,\n      className,\n      ...rest\n    } = this.props;\n\n    return rest;\n  }\n\n  render() {\n    return (\n      <div className={this.getClass()} {...this.getElProps()}>\n        {this.children}\n      </div>\n    );\n  }\n}\n\nexport default Flex;\n","import React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { coy } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nconst Code = props => {\n  let lines = props.children.split('\\n');\n\n  const minWhitespaces = lines.reduce((minTabs, line) => {\n    const pttrn = /^\\s*/;\n    const whitespaces = line.match(pttrn)[0].length;\n    if (minTabs <= 0) {\n      minTabs = whitespaces;\n    }\n    if (minTabs > whitespaces) {\n      minTabs = whitespaces;\n    }\n\n    return minTabs;\n  }, -1);\n\n  lines = lines.map(line => {\n    const pttrn = /^\\s*/;\n    const whitespaces = line.match(pttrn)[0].length;\n    if (whitespaces > 0) {\n      const spaces = whitespaces - minWhitespaces;\n      return new Array(spaces).join(' ') + line.trim();\n    }\n    return line;\n  });\n\n  return (\n    <SyntaxHighlighter className=\"full-width\" language=\"jsx\" style={coy}>\n      {lines.join('\\n')}\n    </SyntaxHighlighter>\n  );\n};\n\nexport default Code;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport '../App.scss';\nimport Code from '../components/Code';\n\nconst Direction = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['0 0 20px 0', 0]}>\n        <h2 id=\"flex-direction\">Flex direction</h2>\n      </Flex>\n      <Flex className=\"section\" gap={{xs:20, sm: 10, es:5}} wrap>\n        <Flex direction=\"column\" basis={50} grow={1}>\n          <Flex spacing={[5, 10]}>\n            <h4>Row</h4>\n          </Flex>\n          <Flex className=\"container\" spacing={{ xs: 10, es: 5 }} grow={1} wrap>\n            {[...Array(4)].map((u, i) => (\n              <Flex key={i} spacing={[5, 10]}>\n                <div className=\"item primary\">Item {i + 1}</div>\n              </Flex>\n            ))}\n          </Flex>\n          <Flex spacing={{ xs: 10, es: 5 }}>\n            <Code>\n              {`<Flex>\n                <div>Item 1</div>\n                <div>Item 2</div>\n                <div>Item 3</div>\n                <div>Item 4</div>\n              </Flex>`}\n            </Code>\n          </Flex>\n        </Flex>\n        <Flex direction=\"column\" basis={50} grow={1}>\n          <Flex spacing={[5, 10]}>\n            <h4>Column</h4>\n          </Flex>\n          <Flex\n            direction=\"column\"\n            className=\"container\"\n            spacing={{ xs: 10, es: 5 }}\n            wrap\n          >\n            {[...Array(4)].map((u, i) => (\n              <Flex key={i} spacing={[5, 10]}>\n                <div className=\"item primary\">Item {i + 1}</div>\n              </Flex>\n            ))}\n          </Flex>\n          <Flex spacing={{ xs: 10, es: 5 }}>\n            <Code>\n              {`<Flex direction=\"column\">\n                <div>Item 1</div>\n                <div>Item 2</div>\n                <div>Item 3</div>\n                <div>Item 4</div>\n              </Flex>`}\n            </Code>\n          </Flex>\n        </Flex>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Direction;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst ITEM_SPACING = { xs: ['10px 0', 0], es: 5 };\n\nconst MainAxis = () => {\n  return (\n    <Fragment>\n      <Flex spacing={'20px 0 10px 0'}>\n        <h4>Main Axis</h4>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={ITEM_SPACING}\n        align=\"start start\"\n        style={{ height: 80 }}\n      >\n        {[...Array(4)].map((u, i) => (\n          <Flex key={i} spacing={[5, 10]}>\n            <div className=\"item\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={ITEM_SPACING}>\n        <Code>\n          {`<Flex align=\"start\">\n                ...\n              </Flex>`}\n        </Code>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={ITEM_SPACING}\n        align=\"center start\"\n        style={{ height: 80 }}\n      >\n        {[...Array(4)].map((u, i) => (\n          <Flex key={i} spacing={[5, 10]}>\n            <div className=\"item\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={ITEM_SPACING}>\n        <Code>\n          {`<Flex align=\"center start\">\n                ...\n              </Flex>`}\n        </Code>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={ITEM_SPACING}\n        align=\"end start\"\n        style={{ height: 80 }}\n      >\n        {[...Array(4)].map((u, i) => (\n          <Flex key={i} spacing={[5, 10]}>\n            <div className=\"item\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={ITEM_SPACING}>\n        <Code>\n          {`<Flex align=\"end start\">\n                ...\n              </Flex>`}\n        </Code>\n      </Flex>\n    </Fragment>\n  );\n};\n\nconst CrossAxis = () => {\n  return (\n    <Fragment>\n      <Flex spacing={'20px 0 10px 0'}>\n        <h4>Cross Axis</h4>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={ITEM_SPACING}\n        align={['start', 'start']}\n        style={{ height: 80 }}\n      >\n        {[...Array(4)].map((u, i) => (\n          <Flex key={i} spacing={[5, 10]}>\n            <div className=\"item\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={ITEM_SPACING}>\n        <Code>\n          {`<Flex align={['start', 'start']}>\n                ...\n              </Flex>`}\n        </Code>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={ITEM_SPACING}\n        align={['start', 'center']}\n        style={{ height: 80 }}\n      >\n        {[...Array(4)].map((u, i) => (\n          <Flex key={i} spacing={[5, 10]}>\n            <div className=\"item\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={ITEM_SPACING}>\n        <Code>\n          {`<Flex align={['start', 'center']}>\n                ...\n              </Flex>`}\n        </Code>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={ITEM_SPACING}\n        align={['start', 'end']}\n        style={{ height: 80 }}\n      >\n        {[...Array(4)].map((u, i) => (\n          <Flex key={i} spacing={[5, 10]}>\n            <div className=\"item\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={ITEM_SPACING}>\n        <Code>\n          {`<Flex align={['start', 'end']}>\n                ...\n              </Flex>`}\n        </Code>\n      </Flex>\n    </Fragment>\n  );\n};\n\nconst BothAxis = () => {\n  return (\n    <Fragment>\n      <Flex spacing={'20px 0'}>\n        <h4>Both Axis</h4>\n      </Flex>\n      <Flex wrap gap={{ xs: 20, es: 8 }} spacing={{ xs: -20, es: -8 }}>\n        <Flex basis={50} grow={1}>\n          <Flex className=\"container\" fill align=\"start\">\n            {[...Array(4)].map((u, i) => (\n              <Flex key={i} spacing={[5, 10]}>\n                <div className=\"item\">Item {i + 1}</div>\n              </Flex>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex basis={50} grow={1}>\n          <Code>\n            {`<Flex align=\"start\">\n                ...\n              </Flex>`}\n          </Code>\n        </Flex>\n\n        <Flex basis={50} grow={1}>\n          <Flex className=\"container\" fill align=\"center\">\n            {[...Array(4)].map((u, i) => (\n              <Flex key={i} spacing={[5, 10]}>\n                <div className=\"item\">Item {i + 1}</div>\n              </Flex>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex basis={50} grow={1}>\n          <Code>\n            {`<Flex align=\"center\">\n                ...\n              </Flex>`}\n          </Code>\n        </Flex>\n\n        <Flex basis={50} grow={1}>\n          <Flex className=\"container\" fill align=\"end\">\n            {[...Array(4)].map((u, i) => (\n              <Flex key={i} spacing={[5, 10]}>\n                <div className=\"item\">Item {i + 1}</div>\n              </Flex>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex basis={50} grow={1}>\n          <Code>\n            {`<Flex align=\"end\">\n                ...\n              </Flex>`}\n          </Code>\n        </Flex>\n      </Flex>\n    </Fragment>\n  );\n};\n\nconst Align = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-align\">Align</h2>\n      </Flex>\n      <Flex className=\"section\" gap={{ xs: 20, es: 8 }} wrap>\n        <Flex direction=\"column\" basis={50} grow={1}>\n          <MainAxis/>\n        </Flex>\n        <Flex direction=\"column\" basis={50} grow={1}>\n          <CrossAxis/>\n        </Flex>\n        <Flex direction=\"column\" basis={100}>\n          <BothAxis/>\n        </Flex>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Align;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport '../App.scss';\nimport Code from '../components/Code';\n\nconst DirectionRow = () => {\n  return (\n    <Flex direction=\"column\" basis={50}>\n      <Flex spacing={[5, 10]}>\n        <h4>Direction Row</h4>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={{ xs: 10, es: 5 }}\n        alignItems=\"start\"\n        alignContent=\"start\"\n        grow={1}\n        wrap\n      >\n        {[...Array(15)].map((u, i) => (\n          <Flex key={i} spacing={5}>\n            <div className=\"item primary\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={{ xs: 10, es: 5 }}>\n        <Code>\n          {`<Flex alignItems=\"start\" wrap>\n              ...\n          </Flex>`}\n        </Code>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst DirectionColumn = () => {\n  return (\n    <Flex direction=\"column\" basis={50}>\n      <Flex spacing={[5, 10]}>\n        <h4>Direction Column</h4>\n      </Flex>\n      <Flex\n        className=\"container\"\n        direction=\"column\"\n        spacing={{ xs: 10, es: 5 }}\n        align=\"start\"\n        alignContent=\"start\"\n        wrap\n        style={{ height: 120 }}\n      >\n        {[...Array(15)].map((u, i) => (\n          <Flex key={i} spacing={5}>\n            <div className=\"item primary\">Item {i + 1}</div>\n          </Flex>\n        ))}\n      </Flex>\n      <Flex spacing={{ xs: 10, es: 5 }}>\n        <Code>\n          {`<Flex direction='column' align=\"start\" wrap>\n              ...\n          </Flex>`}\n        </Code>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Wrap = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-wrap\">Flex Wrap</h2>\n      </Flex>\n      <Flex className=\"section\" spacing={[0, [10, 5]]}>\n        <DirectionRow/>\n        <DirectionColumn/>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Wrap;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst DirectionRow = () => {\n  return (\n    <Flex direction=\"column\" basis={50}>\n      <Flex spacing={[5, 10]}>\n        <h4>Direction Row</h4>\n      </Flex>\n      <Flex\n        className=\"container\"\n        spacing={{ xs: 10, es: 5 }}\n        align=\"start\"\n        grow={1}\n      >\n        <Flex spacing={[5, 10]}>\n          <div className=\"item\">Item 1</div>\n        </Flex>\n        <Flex spacing={[5, 10]} grow={1}>\n          <div className=\"item success full-width\">Item 2 <code>grow={1}</code></div>\n        </Flex>\n        <Flex spacing={[5, 10]}>\n          <div className=\"item\">Item 3</div>\n        </Flex>\n        <Flex spacing={[5, 10]}>\n          <div className=\"item\">Item 4</div>\n        </Flex>\n      </Flex>\n      <Flex spacing={{ xs: 10, es: 5 }}>\n        <Code>\n          {`<Flex align=\"start\">\n              <Flex>Item1</Flex>\n              <Flex grow={1}>Item2</Flex>\n              <Flex>Item3</Flex>\n              <Flex>Item4</Flex>\n          </Flex>`}\n        </Code>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst DirectionColumn = () => {\n  return (\n    <Flex direction=\"column\" basis={50}>\n      <Flex spacing={[5, 10]}>\n        <h4>Direction Column</h4>\n      </Flex>\n      <Flex\n        className=\"container\"\n        direction=\"column\"\n        spacing={{ xs: 10, es: 5 }}\n        align={['start', 'stretch']}\n        style={{ height: 280 }}\n      >\n        <Flex spacing={[5, 10]}>\n          <div className=\"item full-width\">Item1</div>\n        </Flex>\n        <Flex spacing={[5, 10]} grow={1}>\n          <div className=\"item success full-width\">Item2 <code>grow={1}</code></div>\n        </Flex>\n        <Flex spacing={[5, 10]}>\n          <div className=\"item full-width\">Item3</div>\n        </Flex>\n        <Flex spacing={[5, 10]}>\n          <div className=\"item full-width\">Item4</div>\n        </Flex>\n      </Flex>\n      <Flex spacing={{ xs: 10, es: 5 }} >\n        <Code>\n          {`<Flex direction='column' align={['start', 'stretch']}>\n              <Flex>Item1</Flex>\n              <Flex grow={1}>Item2 </Flex>\n              <Flex>Item3</Flex>\n              <Flex>Item4</Flex>\n          </Flex>`}\n        </Code>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Grow = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2>Flex Grow</h2>\n      </Flex>\n      <Flex className=\"section\" spacing={[0, [10, 5]]}>\n        <DirectionRow/>\n        <DirectionColumn/>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Grow;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst DirectionRow = () => {\n  return (\n    <Fragment>\n      <Flex className=\"container\" grow={1}>\n        <Flex spacing={[5, 10]} grow={1} shrink={1} basis=\"20em\">\n          <div className=\"item primary full-width\">\n            <span>Item 1</span>\n            <br/>\n            <code>grow={1}</code>\n            <br/>\n            <code>shrink={1}</code>\n            <br/>\n            <code>basis=\"20em\"</code>\n          </div>\n        </Flex>\n        <Flex spacing={[5, 10]} grow={2} shrink={2} basis=\"20em\">\n          <div className=\"item success full-width\">\n            <span>Item 2</span>\n            <br/>\n            <code>grow={2}</code>\n            <br/>\n            <code>shrink={2}</code>\n            <br/>\n            <code>basis=\"20em\"</code>\n          </div>\n        </Flex>\n      </Flex>\n    </Fragment>\n  );\n};\n\nconst DirectionColumn = () => {\n  return (\n    <Fragment>\n      <Flex grow={1}>\n        <Code>\n          {`<Flex>\n              <Flex grow={1} shrink={1} basis=\"20em\">Item 1</Flex>\n              <Flex grow={2} shrink={2} basis=\"20em\">Item 2</Flex>\n            </Flex>`}\n        </Code>\n      </Flex>\n    </Fragment>\n  );\n};\n\nconst Shrink = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-shrink\">Flex Shrink</h2>\n      </Flex>\n      <Flex className=\"section\" gap={{ xs: 20, es: 8 }} wrap>\n        <Flex direction=\"column\" basis={50} grow={1}>\n          <DirectionRow/>\n        </Flex>\n        <Flex direction=\"column\" basis={50} grow={1}>\n          <DirectionColumn/>\n        </Flex>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Shrink;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport '../App.scss';\nimport Code from '../components/Code';\n\nconst DirectionRow = () => {\n  return (\n    <Flex direction=\"column\">\n      <Flex className=\"container\" spacing={{ xs: 10, es: 5 }}>\n        <Flex spacing={[5, 10]} basis={10}>\n          <div className=\"item full-width\">\n            <span>Item 1</span>\n            <br />\n            <code>basis=10%</code>\n          </div>\n        </Flex>\n        <Flex spacing={[5, 10]} basis={20}>\n          <div className=\"item success full-width\">\n            <span>Item 2</span>\n            <br />\n            <code>basis=20%</code>\n          </div>\n        </Flex>\n        <Flex spacing={[5, 10]} basis={30}>\n          <div className=\"item primary full-width\" basis={30}>\n            <span>Item 3</span>\n            <br />\n            <code>basis=30%</code>\n          </div>\n        </Flex>\n        <Flex spacing={[5, 10]} basis={40}>\n          <div className=\"item danger full-width\" basis={10}>\n            <span>Item 4</span>\n            <br />\n            <code>basis=40%</code>\n          </div>\n        </Flex>\n      </Flex>\n      <Flex spacing={{ xs: 10, es: 5 }}>\n        <Code>\n          {`<Flex>\n              <Flex basis={10}>Item1</Flex>\n              <Flex basis={20}>Item2</Flex>\n              <Flex basis={30}>Item3</Flex>\n              <Flex basis={40}>Item4</Flex>\n          </Flex>`}\n        </Code>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Basis = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-basis\">Flex Basis</h2>\n      </Flex>\n      <Flex direction=\"column\" className=\"section\" spacing={[0, [10, 5]]}>\n        <DirectionRow />\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Basis;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  id: \"svgg\"\n}, React.createElement(\"path\", {\n  id: \"path0\",\n  d: \"M198.600 22.747 C 197.669 23.092,195.122 24.196,193.400 25.002 C 187.655 27.689,183.784 29.517,179.000 31.803 C 175.920 33.275,173.040 34.648,172.600 34.856 C 172.160 35.064,170.000 36.201,167.800 37.385 C 165.600 38.568,162.180 40.356,160.200 41.360 C 158.220 42.363,156.330 43.352,156.000 43.558 C 155.670 43.764,154.320 44.481,153.000 45.151 C 151.680 45.820,149.520 46.917,148.200 47.588 C 146.880 48.259,144.180 49.711,142.200 50.815 C 140.220 51.919,137.520 53.368,136.200 54.035 C 134.880 54.702,133.080 55.651,132.200 56.144 C 131.320 56.636,128.620 58.100,126.200 59.395 C 123.780 60.691,121.080 62.161,120.200 62.662 C 119.320 63.163,118.060 63.844,117.400 64.175 C 116.740 64.505,115.120 65.397,113.800 66.155 C 112.480 66.913,109.960 68.291,108.200 69.217 C 106.440 70.143,104.786 71.071,104.524 71.280 C 104.262 71.488,102.912 72.241,101.524 72.952 C 100.136 73.664,97.709 75.000,96.130 75.923 C 94.552 76.845,93.174 77.600,93.068 77.600 C 92.962 77.600,91.346 78.500,89.477 79.600 C 87.608 80.700,85.986 81.600,85.872 81.600 C 85.758 81.600,83.806 82.700,81.533 84.044 C 79.260 85.388,77.040 86.652,76.600 86.851 C 76.160 87.050,74.990 87.676,74.000 88.241 C 73.010 88.806,71.390 89.712,70.400 90.256 C 69.410 90.799,68.330 91.406,68.000 91.606 C 67.670 91.805,65.060 93.301,62.200 94.929 C 59.340 96.558,55.020 99.029,52.600 100.420 C 47.640 103.272,45.510 104.455,42.555 106.000 C 38.965 107.877,31.630 113.576,30.066 115.705 C 29.773 116.105,29.223 116.740,28.844 117.116 C 26.470 119.476,23.692 124.540,22.348 128.961 C 21.193 132.757,21.203 302.160,22.358 305.600 C 24.632 312.372,32.047 321.159,38.000 324.138 C 38.330 324.303,39.320 324.875,40.200 325.410 C 41.080 325.944,42.160 326.568,42.600 326.796 C 43.040 327.025,43.940 327.565,44.600 327.996 C 45.260 328.427,46.790 329.326,48.000 329.993 C 49.210 330.660,50.549 331.430,50.977 331.703 C 52.686 332.797,55.835 334.681,56.400 334.948 C 57.065 335.262,57.702 335.634,60.616 337.408 C 63.473 339.147,63.976 339.437,66.200 340.627 C 67.300 341.215,68.974 342.215,69.920 342.848 C 70.866 343.482,71.730 344.000,71.840 344.000 C 71.950 344.000,74.596 345.502,77.720 347.338 C 80.844 349.173,83.670 350.795,84.000 350.942 C 84.330 351.089,85.140 351.567,85.800 352.005 C 86.460 352.443,87.540 353.077,88.200 353.414 C 88.860 353.750,89.940 354.364,90.600 354.777 C 91.704 355.468,93.054 356.223,96.800 358.245 C 97.570 358.660,98.290 359.112,98.400 359.249 C 98.510 359.385,100.130 360.338,102.000 361.366 C 103.870 362.395,105.670 363.396,106.000 363.591 C 106.330 363.786,108.220 364.870,110.200 366.000 C 112.180 367.130,114.070 368.225,114.400 368.435 C 114.730 368.645,115.540 369.088,116.200 369.421 C 116.860 369.753,117.940 370.374,118.600 370.800 C 119.260 371.226,120.340 371.845,121.000 372.175 C 121.660 372.506,123.280 373.407,124.600 374.179 C 125.920 374.950,127.540 375.850,128.200 376.179 C 128.860 376.507,130.480 377.411,131.800 378.187 C 133.120 378.963,134.470 379.723,134.800 379.876 C 135.130 380.028,136.390 380.724,137.600 381.422 C 140.231 382.940,142.627 384.264,147.194 386.723 C 149.067 387.732,151.320 388.959,152.200 389.450 C 155.182 391.114,157.791 392.534,160.400 393.913 C 161.830 394.669,164.800 396.246,167.000 397.418 C 169.200 398.590,176.130 402.100,182.400 405.218 C 188.670 408.336,194.070 411.049,194.400 411.246 C 194.730 411.444,195.270 411.706,195.600 411.830 C 195.930 411.953,196.970 412.402,197.911 412.827 C 200.019 413.779,200.127 413.780,202.156 412.835 C 203.060 412.413,205.780 411.153,208.200 410.033 C 210.620 408.913,212.870 407.825,213.200 407.616 C 213.748 407.268,215.442 406.428,219.800 404.344 C 222.422 403.091,234.001 397.010,240.800 393.317 C 242.010 392.660,244.440 391.342,246.200 390.389 C 249.859 388.408,250.773 387.906,253.000 386.655 C 254.637 385.736,259.890 382.854,262.400 381.498 C 263.170 381.082,264.340 380.401,265.000 379.984 C 265.660 379.567,266.740 378.975,267.400 378.670 C 268.547 378.139,278.750 372.406,280.000 371.590 C 280.330 371.374,280.960 371.038,281.400 370.843 C 281.840 370.648,284.000 369.431,286.200 368.139 C 288.400 366.847,290.650 365.565,291.200 365.291 C 291.750 365.016,292.740 364.439,293.400 364.008 C 294.060 363.578,295.140 362.954,295.800 362.622 C 297.477 361.779,300.702 359.940,302.600 358.744 C 303.480 358.189,305.456 357.049,306.992 356.210 C 309.799 354.677,327.679 344.339,328.800 343.601 C 329.130 343.384,330.390 342.660,331.600 341.993 C 332.810 341.326,334.340 340.427,335.000 339.996 C 335.660 339.565,336.596 339.037,337.081 338.823 C 337.565 338.609,338.735 337.935,339.681 337.325 C 341.889 335.901,342.645 335.458,344.600 334.447 C 345.480 333.992,347.161 332.985,348.335 332.210 C 349.509 331.434,350.548 330.800,350.645 330.800 C 350.741 330.800,353.161 329.405,356.023 327.700 C 358.885 325.995,361.536 324.416,361.914 324.192 C 369.201 319.858,375.645 312.218,377.872 305.270 C 379.016 301.702,379.003 133.722,377.859 129.400 C 375.497 120.479,367.815 111.600,357.710 106.109 C 356.659 105.539,355.080 104.656,354.200 104.147 C 353.320 103.638,351.610 102.676,350.400 102.008 C 349.190 101.340,347.930 100.625,347.600 100.418 C 346.517 99.739,340.214 96.155,339.600 95.869 C 339.270 95.715,338.280 95.171,337.400 94.659 C 336.520 94.147,334.990 93.284,334.000 92.741 C 333.010 92.198,331.439 91.269,330.508 90.677 C 329.577 90.085,328.727 89.600,328.618 89.600 C 328.453 89.600,320.142 84.988,314.200 81.599 C 313.320 81.097,311.880 80.295,311.000 79.817 C 305.883 77.035,303.755 75.850,303.400 75.582 C 303.180 75.416,301.920 74.713,300.600 74.019 C 299.280 73.326,297.480 72.351,296.600 71.854 C 295.720 71.356,293.830 70.312,292.400 69.532 C 290.970 68.752,288.180 67.220,286.200 66.127 C 284.220 65.033,282.330 64.015,282.000 63.864 C 281.670 63.713,280.590 63.123,279.600 62.554 C 277.425 61.302,272.717 58.755,269.276 56.969 C 267.888 56.248,266.538 55.492,266.276 55.288 C 266.014 55.085,263.280 53.602,260.200 51.994 C 257.120 50.385,253.430 48.444,252.000 47.680 C 234.498 38.327,217.346 29.761,206.600 25.008 C 205.940 24.716,204.586 24.103,203.590 23.647 C 201.432 22.656,199.693 22.343,198.600 22.747 M152.469 124.262 C 153.442 125.143,153.622 163.152,152.656 163.954 C 152.260 164.282,144.422 164.377,123.956 164.303 L 95.800 164.200 95.695 148.742 L 95.591 133.284 96.639 131.198 C 97.913 128.660,101.311 125.238,102.864 124.927 C 103.489 124.802,104.000 124.554,104.000 124.377 C 104.000 123.367,151.356 123.255,152.469 124.262 M297.083 124.701 C 299.221 125.846,303.200 129.648,303.200 130.545 C 303.200 130.921,303.472 131.643,303.805 132.151 C 304.323 132.942,304.395 135.300,304.305 148.637 L 304.200 164.200 233.300 164.301 L 162.400 164.402 162.400 144.268 C 162.400 133.194,162.523 124.011,162.672 123.861 C 162.822 123.711,192.747 123.636,229.172 123.694 L 295.400 123.800 297.083 124.701 M303.771 174.629 C 304.518 175.375,304.744 226.242,304.010 228.174 L 303.620 229.200 200.290 229.200 C 120.456 229.200,96.851 229.091,96.480 228.720 C 95.786 228.026,95.786 175.174,96.480 174.480 C 97.310 173.650,302.940 173.797,303.771 174.629 M195.251 239.061 C 195.707 239.611,195.800 245.749,195.800 275.400 C 195.800 305.051,195.707 311.189,195.251 311.739 C 194.498 312.646,106.506 312.764,104.773 311.859 C 104.209 311.565,103.309 311.212,102.773 311.076 C 102.238 310.941,101.204 310.283,100.475 309.615 C 99.747 308.947,98.982 308.400,98.775 308.400 C 98.569 308.400,98.400 308.124,98.400 307.787 C 98.400 307.451,98.130 307.071,97.800 306.945 C 97.470 306.818,97.200 306.506,97.200 306.251 C 97.200 305.997,96.840 305.116,96.400 304.296 C 95.420 302.467,95.113 239.847,96.080 238.880 C 96.937 238.023,194.538 238.202,195.251 239.061 M304.157 239.033 C 304.762 240.609,304.417 303.526,303.800 304.143 C 303.470 304.473,303.200 304.970,303.200 305.247 C 303.200 306.018,301.465 308.394,300.900 308.397 C 300.625 308.399,300.400 308.627,300.400 308.905 C 300.400 309.496,299.231 310.177,295.340 311.856 C 294.302 312.304,286.245 312.400,249.830 312.400 L 205.580 312.400 205.190 311.374 C 204.760 310.241,204.626 241.771,205.050 239.650 L 205.300 238.400 254.607 238.400 C 299.200 238.400,303.938 238.460,304.157 239.033 \",\n  stroke: \"none\",\n  fill: \"#1ba3d3\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path1\",\n  d: \"M105.600 124.588 C 101.229 125.840,98.996 127.662,97.219 131.422 L 95.990 134.023 96.095 148.911 L 96.200 163.800 124.200 163.800 L 152.200 163.800 152.304 144.446 C 152.379 130.487,152.281 124.939,151.955 124.546 C 151.311 123.770,108.315 123.809,105.600 124.588 M162.887 124.700 C 162.729 125.085,162.600 134.040,162.600 144.600 L 162.600 163.800 233.200 163.800 L 303.800 163.800 303.905 149.026 C 303.998 135.896,303.934 134.050,303.325 132.426 C 301.734 128.180,299.254 125.933,294.738 124.645 C 291.106 123.609,163.314 123.662,162.887 124.700 M151.757 125.433 C 151.891 125.781,152.000 134.511,152.000 144.833 L 152.000 163.600 124.391 163.600 L 96.781 163.600 96.916 148.500 C 96.991 140.195,97.204 132.860,97.390 132.200 C 98.292 129.000,101.321 126.280,104.978 125.384 C 108.377 124.551,151.436 124.596,151.757 125.433 M294.948 125.370 C 298.153 126.205,300.482 127.875,301.680 130.200 C 303.644 134.010,303.600 133.581,303.600 149.014 L 303.600 163.600 233.400 163.600 L 163.200 163.600 163.200 144.200 L 163.200 124.800 227.980 124.800 C 282.744 124.800,293.099 124.888,294.948 125.370 M97.300 175.065 C 96.451 175.407,96.582 227.431,97.433 227.757 C 98.260 228.075,301.740 228.075,302.567 227.757 C 303.534 227.386,303.534 175.414,302.567 175.043 C 301.810 174.752,98.020 174.774,97.300 175.065 M96.390 239.826 C 96.149 240.460,96.000 252.528,96.000 271.425 L 96.000 301.998 97.222 304.584 C 98.857 308.045,101.189 310.076,104.781 311.167 C 108.941 312.430,194.111 312.487,194.786 311.226 C 195.062 310.710,195.200 298.798,195.200 275.400 C 195.200 252.002,195.062 240.090,194.786 239.574 C 194.380 238.815,193.410 238.800,145.576 238.800 L 96.780 238.800 96.390 239.826 M205.452 239.700 C 205.010 241.348,205.167 310.391,205.614 311.226 C 206.266 312.444,291.209 312.426,295.095 311.208 C 299.399 309.858,301.754 307.799,303.143 304.169 C 304.174 301.475,304.529 240.289,303.520 239.280 C 303.152 238.912,291.690 238.800,254.367 238.800 L 205.693 238.800 205.452 239.700 M194.200 275.400 L 194.200 311.400 151.800 311.519 C 113.302 311.626,109.124 311.575,106.400 310.966 C 101.277 309.820,98.612 307.603,97.309 303.400 C 96.601 301.118,96.575 240.385,97.282 239.678 C 97.653 239.307,108.809 239.220,145.982 239.298 L 194.200 239.400 194.200 275.400 M302.869 239.862 C 303.676 240.593,304.044 302.078,303.244 302.573 C 303.049 302.694,302.768 303.289,302.620 303.896 C 301.866 306.995,298.750 309.738,294.800 310.781 C 291.735 311.590,206.438 311.900,205.932 311.104 C 205.564 310.523,205.476 240.788,205.843 239.833 C 206.224 238.839,301.769 238.867,302.869 239.862 \",\n  stroke: \"none\",\n  fill: \"#74e3fb\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path2\",\n  d: \"M192.800 0.400 C 192.800 0.620,192.170 0.800,191.400 0.800 C 190.422 0.800,190.000 0.981,190.000 1.400 C 190.000 1.846,189.529 2.000,188.163 2.000 C 186.662 2.000,186.287 2.146,186.116 2.800 C 185.968 3.367,185.570 3.600,184.753 3.600 C 183.995 3.600,183.600 3.805,183.600 4.200 C 183.600 4.619,183.178 4.800,182.200 4.800 C 181.222 4.800,180.800 4.981,180.800 5.400 C 180.800 5.846,180.329 6.000,178.963 6.000 C 177.462 6.000,177.087 6.146,176.916 6.800 C 176.767 7.369,176.370 7.600,175.541 7.600 C 174.873 7.600,174.276 7.857,174.145 8.200 C 174.013 8.542,173.417 8.800,172.757 8.800 C 171.995 8.800,171.600 9.005,171.600 9.400 C 171.600 9.804,171.196 10.000,170.363 10.000 C 169.462 10.000,169.068 10.217,168.916 10.800 C 168.759 11.401,168.370 11.600,167.353 11.600 C 166.417 11.600,166.000 11.785,166.000 12.200 C 166.000 12.600,165.600 12.800,164.800 12.800 C 164.000 12.800,163.600 13.000,163.600 13.400 C 163.600 13.804,163.196 14.000,162.363 14.000 C 161.462 14.000,161.068 14.217,160.916 14.800 C 160.759 15.401,160.370 15.600,159.353 15.600 C 158.417 15.600,158.000 15.785,158.000 16.200 C 158.000 16.600,157.600 16.800,156.800 16.800 C 156.000 16.800,155.600 17.000,155.600 17.400 C 155.600 17.804,155.196 18.000,154.363 18.000 C 153.462 18.000,153.068 18.217,152.916 18.800 C 152.767 19.369,152.370 19.600,151.541 19.600 C 150.873 19.600,150.276 19.857,150.145 20.200 C 150.013 20.542,149.417 20.800,148.757 20.800 C 147.995 20.800,147.600 21.005,147.600 21.400 C 147.600 21.804,147.196 22.000,146.363 22.000 C 145.462 22.000,145.068 22.217,144.916 22.800 C 144.801 23.240,144.458 23.600,144.153 23.600 C 143.849 23.600,143.600 23.870,143.600 24.200 C 143.600 24.619,143.178 24.800,142.200 24.800 C 141.222 24.800,140.800 24.981,140.800 25.400 C 140.800 25.819,140.378 26.000,139.400 26.000 C 138.267 26.000,138.000 26.152,138.000 26.800 C 138.000 27.422,137.733 27.600,136.800 27.600 C 136.000 27.600,135.600 27.800,135.600 28.200 C 135.600 28.619,135.178 28.800,134.200 28.800 C 133.222 28.800,132.800 28.981,132.800 29.400 C 132.800 29.804,132.396 30.000,131.563 30.000 C 130.662 30.000,130.268 30.217,130.116 30.800 C 129.968 31.367,129.570 31.600,128.753 31.600 C 127.995 31.600,127.600 31.805,127.600 32.200 C 127.600 32.601,127.199 32.800,126.387 32.800 C 125.679 32.800,125.079 33.049,124.945 33.400 C 124.818 33.730,124.464 34.000,124.157 34.000 C 123.851 34.000,123.600 34.360,123.600 34.800 C 123.600 35.448,123.333 35.600,122.200 35.600 C 121.222 35.600,120.800 35.781,120.800 36.200 C 120.800 36.619,120.378 36.800,119.400 36.800 C 118.422 36.800,118.000 36.981,118.000 37.400 C 118.000 37.800,117.600 38.000,116.800 38.000 C 115.867 38.000,115.600 38.178,115.600 38.800 C 115.600 39.448,115.333 39.600,114.200 39.600 C 113.222 39.600,112.800 39.781,112.800 40.200 C 112.800 40.601,112.399 40.800,111.587 40.800 C 110.879 40.800,110.279 41.049,110.145 41.400 C 110.018 41.730,109.467 42.000,108.920 42.000 C 108.262 42.000,107.854 42.271,107.716 42.800 C 107.600 43.243,107.170 43.600,106.753 43.600 C 106.339 43.600,106.000 43.870,106.000 44.200 C 106.000 44.600,105.600 44.800,104.800 44.800 C 104.000 44.800,103.600 45.000,103.600 45.400 C 103.600 45.819,103.178 46.000,102.200 46.000 C 101.067 46.000,100.800 46.152,100.800 46.800 C 100.800 47.448,100.533 47.600,99.400 47.600 C 98.422 47.600,98.000 47.781,98.000 48.200 C 98.000 48.600,97.600 48.800,96.800 48.800 C 96.000 48.800,95.600 49.000,95.600 49.400 C 95.600 49.733,95.244 50.000,94.800 50.000 C 94.267 50.000,94.000 50.267,94.000 50.800 C 94.000 51.422,93.733 51.600,92.800 51.600 C 92.000 51.600,91.600 51.800,91.600 52.200 C 91.600 52.619,91.178 52.800,90.200 52.800 C 89.222 52.800,88.800 52.981,88.800 53.400 C 88.800 53.804,88.396 54.000,87.563 54.000 C 86.662 54.000,86.268 54.217,86.116 54.800 C 85.968 55.367,85.570 55.600,84.753 55.600 C 83.995 55.600,83.600 55.805,83.600 56.200 C 83.600 56.601,83.199 56.800,82.387 56.800 C 81.679 56.800,81.079 57.049,80.945 57.400 C 80.818 57.730,80.464 58.000,80.157 58.000 C 79.851 58.000,79.600 58.360,79.600 58.800 C 79.600 59.448,79.333 59.600,78.200 59.600 C 77.222 59.600,76.800 59.781,76.800 60.200 C 76.800 60.619,76.378 60.800,75.400 60.800 C 74.422 60.800,74.000 60.981,74.000 61.400 C 74.000 61.779,73.618 62.000,72.963 62.000 C 72.262 62.000,71.857 62.259,71.716 62.800 C 71.600 63.243,71.170 63.600,70.753 63.600 C 70.339 63.600,70.000 63.870,70.000 64.200 C 70.000 64.600,69.600 64.800,68.800 64.800 C 68.000 64.800,67.600 65.000,67.600 65.400 C 67.600 65.819,67.178 66.000,66.200 66.000 C 65.067 66.000,64.800 66.152,64.800 66.800 C 64.800 67.448,64.533 67.600,63.400 67.600 C 62.422 67.600,62.000 67.781,62.000 68.200 C 62.000 68.600,61.600 68.800,60.800 68.800 C 60.000 68.800,59.600 69.000,59.600 69.400 C 59.600 69.733,59.244 70.000,58.800 70.000 C 58.267 70.000,58.000 70.267,58.000 70.800 C 58.000 71.422,57.733 71.600,56.800 71.600 C 56.000 71.600,55.600 71.800,55.600 72.200 C 55.600 72.619,55.178 72.800,54.200 72.800 C 53.222 72.800,52.800 72.981,52.800 73.400 C 52.800 73.773,52.423 74.000,51.803 74.000 C 51.240 74.000,50.590 74.348,50.307 74.800 C 50.032 75.240,49.581 75.600,49.304 75.600 C 49.027 75.600,48.800 75.870,48.800 76.200 C 48.800 76.619,48.378 76.800,47.400 76.800 C 46.422 76.800,46.000 76.981,46.000 77.400 C 46.000 77.800,45.600 78.000,44.800 78.000 C 43.867 78.000,43.600 78.178,43.600 78.800 C 43.600 79.448,43.333 79.600,42.200 79.600 C 41.222 79.600,40.800 79.781,40.800 80.200 C 40.800 80.601,40.399 80.800,39.587 80.800 C 38.879 80.800,38.279 81.049,38.145 81.400 C 38.018 81.730,37.664 82.000,37.357 82.000 C 37.051 82.000,36.800 82.360,36.800 82.800 C 36.800 83.448,36.533 83.600,35.400 83.600 C 34.422 83.600,34.000 83.781,34.000 84.200 C 34.000 84.600,33.600 84.800,32.800 84.800 C 32.000 84.800,31.600 85.000,31.600 85.400 C 31.600 85.804,31.196 86.000,30.363 86.000 C 29.462 86.000,29.068 86.217,28.916 86.800 C 28.801 87.240,28.458 87.600,28.153 87.600 C 27.849 87.600,27.600 87.870,27.600 88.200 C 27.600 88.619,27.178 88.800,26.200 88.800 C 25.222 88.800,24.800 88.981,24.800 89.400 C 24.800 89.730,24.530 90.000,24.200 90.000 C 23.867 90.000,23.600 90.356,23.600 90.800 C 23.600 91.424,23.333 91.600,22.387 91.600 C 21.679 91.600,21.079 91.849,20.945 92.200 C 20.818 92.530,20.464 92.800,20.157 92.800 C 19.851 92.800,19.600 93.070,19.600 93.400 C 19.600 93.730,19.313 94.000,18.963 94.000 C 18.612 94.000,18.231 94.360,18.116 94.800 C 18.001 95.240,17.658 95.600,17.353 95.600 C 17.049 95.600,16.800 95.870,16.800 96.200 C 16.800 96.530,16.530 96.800,16.200 96.800 C 15.870 96.800,15.600 97.070,15.600 97.400 C 15.600 97.733,15.244 98.000,14.800 98.000 C 14.267 98.000,14.000 98.267,14.000 98.800 C 14.000 99.244,13.733 99.600,13.400 99.600 C 13.070 99.600,12.800 99.870,12.800 100.200 C 12.800 100.530,12.530 100.800,12.200 100.800 C 11.870 100.800,11.600 101.070,11.600 101.400 C 11.600 101.730,11.313 102.000,10.963 102.000 C 10.612 102.000,10.234 102.348,10.123 102.772 C 10.012 103.197,9.669 103.641,9.361 103.760 C 9.052 103.878,8.800 104.431,8.800 104.987 C 8.800 105.621,8.575 106.000,8.200 106.000 C 7.867 106.000,7.600 106.356,7.600 106.800 C 7.600 107.333,7.333 107.600,6.800 107.600 C 6.178 107.600,6.000 107.867,6.000 108.800 C 6.000 109.600,5.800 110.000,5.400 110.000 C 5.067 110.000,4.800 110.356,4.800 110.800 C 4.800 111.244,4.533 111.600,4.200 111.600 C 3.747 111.600,3.600 112.089,3.600 113.600 C 3.600 115.333,3.493 115.600,2.800 115.600 C 2.184 115.600,2.000 115.867,2.000 116.757 C 2.000 117.417,1.742 118.013,1.400 118.145 C 0.989 118.302,0.800 118.945,0.800 120.187 C 0.800 121.184,0.620 122.000,0.400 122.000 C 0.134 122.000,0.000 154.067,0.000 217.400 C 0.000 280.733,0.134 312.800,0.400 312.800 C 0.620 312.800,0.800 313.610,0.800 314.600 C 0.800 315.933,0.956 316.400,1.400 316.400 C 1.819 316.400,2.000 316.822,2.000 317.800 C 2.000 318.933,2.152 319.200,2.800 319.200 C 3.448 319.200,3.600 319.467,3.600 320.600 C 3.600 321.578,3.781 322.000,4.200 322.000 C 4.600 322.000,4.800 322.400,4.800 323.200 C 4.800 324.000,5.000 324.400,5.400 324.400 C 5.733 324.400,6.000 324.756,6.000 325.200 C 6.000 325.733,6.267 326.000,6.800 326.000 C 7.422 326.000,7.600 326.267,7.600 327.200 C 7.600 328.000,7.800 328.400,8.200 328.400 C 8.533 328.400,8.800 328.756,8.800 329.200 C 8.800 329.644,9.067 330.000,9.400 330.000 C 9.730 330.000,10.000 330.270,10.000 330.600 C 10.000 330.933,10.356 331.200,10.800 331.200 C 11.333 331.200,11.600 331.467,11.600 332.000 C 11.600 332.444,11.867 332.800,12.200 332.800 C 12.530 332.800,12.800 333.070,12.800 333.400 C 12.800 333.730,13.070 334.000,13.400 334.000 C 13.730 334.000,14.000 334.270,14.000 334.600 C 14.000 334.933,14.356 335.200,14.800 335.200 C 15.333 335.200,15.600 335.467,15.600 336.000 C 15.600 336.444,15.867 336.800,16.200 336.800 C 16.530 336.800,16.800 337.070,16.800 337.400 C 16.800 337.730,17.070 338.000,17.400 338.000 C 17.730 338.000,18.000 338.270,18.000 338.600 C 18.000 338.933,18.356 339.200,18.800 339.200 C 19.240 339.200,19.600 339.456,19.600 339.768 C 19.600 340.081,20.140 340.455,20.800 340.600 C 21.460 340.745,22.000 341.119,22.000 341.432 C 22.000 341.744,22.360 342.000,22.800 342.000 C 23.244 342.000,23.600 342.267,23.600 342.600 C 23.600 343.000,24.000 343.200,24.800 343.200 C 25.631 343.200,26.000 343.396,26.000 343.837 C 26.000 344.188,26.348 344.566,26.772 344.677 C 27.197 344.788,27.641 345.131,27.760 345.439 C 27.878 345.748,28.431 346.000,28.987 346.000 C 29.621 346.000,30.000 346.225,30.000 346.600 C 30.000 347.015,30.417 347.200,31.353 347.200 C 32.370 347.200,32.759 347.399,32.916 348.000 C 33.068 348.583,33.462 348.800,34.363 348.800 C 35.196 348.800,35.600 348.996,35.600 349.400 C 35.600 349.730,35.870 350.000,36.200 350.000 C 36.530 350.000,36.800 350.270,36.800 350.600 C 36.800 351.019,37.222 351.200,38.200 351.200 C 39.333 351.200,39.600 351.352,39.600 352.000 C 39.600 352.622,39.867 352.800,40.800 352.800 C 41.600 352.800,42.000 353.000,42.000 353.400 C 42.000 353.733,42.356 354.000,42.800 354.000 C 43.244 354.000,43.600 354.267,43.600 354.600 C 43.600 354.995,43.995 355.200,44.753 355.200 C 45.570 355.200,45.968 355.433,46.116 356.000 C 46.268 356.583,46.662 356.800,47.563 356.800 C 48.396 356.800,48.800 356.996,48.800 357.400 C 48.800 357.730,49.051 358.000,49.357 358.000 C 49.664 358.000,50.018 358.270,50.145 358.600 C 50.276 358.943,50.873 359.200,51.541 359.200 C 52.370 359.200,52.767 359.431,52.916 360.000 C 53.068 360.583,53.462 360.800,54.363 360.800 C 55.196 360.800,55.600 360.996,55.600 361.400 C 55.600 361.800,56.000 362.000,56.800 362.000 C 57.600 362.000,58.000 362.200,58.000 362.600 C 58.000 362.933,58.356 363.200,58.800 363.200 C 59.240 363.200,59.600 363.456,59.600 363.768 C 59.600 364.081,60.125 364.452,60.767 364.593 C 61.408 364.734,62.033 365.108,62.154 365.424 C 62.279 365.750,62.902 366.000,63.587 366.000 C 64.399 366.000,64.800 366.199,64.800 366.600 C 64.800 367.019,65.222 367.200,66.200 367.200 C 67.333 367.200,67.600 367.352,67.600 368.000 C 67.600 368.444,67.867 368.800,68.200 368.800 C 68.530 368.800,68.800 369.070,68.800 369.400 C 68.800 369.819,69.222 370.000,70.200 370.000 C 71.178 370.000,71.600 370.181,71.600 370.600 C 71.600 371.000,72.000 371.200,72.800 371.200 C 73.631 371.200,74.000 371.396,74.000 371.837 C 74.000 372.188,74.348 372.566,74.772 372.677 C 75.197 372.788,75.641 373.131,75.760 373.439 C 75.878 373.748,76.431 374.000,76.987 374.000 C 77.621 374.000,78.000 374.225,78.000 374.600 C 78.000 375.015,78.417 375.200,79.353 375.200 C 80.370 375.200,80.759 375.399,80.916 376.000 C 81.068 376.583,81.462 376.800,82.363 376.800 C 83.196 376.800,83.600 376.996,83.600 377.400 C 83.600 377.730,83.851 378.000,84.157 378.000 C 84.464 378.000,84.818 378.270,84.945 378.600 C 85.076 378.943,85.673 379.200,86.341 379.200 C 87.170 379.200,87.567 379.431,87.716 380.000 C 87.857 380.541,88.262 380.800,88.963 380.800 C 89.618 380.800,90.000 381.021,90.000 381.400 C 90.000 381.819,90.422 382.000,91.400 382.000 C 92.378 382.000,92.800 382.181,92.800 382.600 C 92.800 382.930,92.980 383.200,93.200 383.200 C 93.420 383.200,93.960 383.560,94.400 384.000 C 94.840 384.440,95.560 384.800,96.000 384.800 C 96.444 384.800,96.800 385.067,96.800 385.400 C 96.800 385.819,97.222 386.000,98.200 386.000 C 99.178 386.000,99.600 386.181,99.600 386.600 C 99.600 387.000,100.000 387.200,100.800 387.200 C 101.611 387.200,102.000 387.399,102.000 387.813 C 102.000 388.149,102.315 388.541,102.700 388.682 C 103.085 388.824,103.544 389.178,103.720 389.470 C 103.896 389.761,104.481 390.000,105.020 390.000 C 105.624 390.000,106.000 390.230,106.000 390.600 C 106.000 391.015,106.417 391.200,107.353 391.200 C 108.370 391.200,108.759 391.399,108.916 392.000 C 109.068 392.583,109.462 392.800,110.363 392.800 C 111.196 392.800,111.600 392.996,111.600 393.400 C 111.600 393.800,112.000 394.000,112.800 394.000 C 113.600 394.000,114.000 394.200,114.000 394.600 C 114.000 394.933,114.356 395.200,114.800 395.200 C 115.240 395.200,115.600 395.456,115.600 395.768 C 115.600 396.081,116.125 396.452,116.767 396.593 C 117.408 396.734,118.033 397.108,118.154 397.424 C 118.279 397.750,118.902 398.000,119.587 398.000 C 120.399 398.000,120.800 398.199,120.800 398.600 C 120.800 399.019,121.222 399.200,122.200 399.200 C 123.333 399.200,123.600 399.352,123.600 400.000 C 123.600 400.440,123.851 400.800,124.157 400.800 C 124.464 400.800,124.818 401.070,124.945 401.400 C 125.079 401.751,125.679 402.000,126.387 402.000 C 127.199 402.000,127.600 402.199,127.600 402.600 C 127.600 403.000,128.000 403.200,128.800 403.200 C 129.559 403.200,130.000 403.405,130.000 403.757 C 130.000 404.369,130.841 404.800,132.033 404.800 C 132.455 404.800,132.800 405.070,132.800 405.400 C 132.800 405.819,133.222 406.000,134.200 406.000 C 135.178 406.000,135.600 406.181,135.600 406.600 C 135.600 407.000,136.000 407.200,136.800 407.200 C 137.733 407.200,138.000 407.378,138.000 408.000 C 138.000 408.518,138.267 408.800,138.757 408.800 C 139.174 408.800,139.618 409.070,139.745 409.400 C 139.871 409.730,140.431 410.000,140.987 410.000 C 141.621 410.000,142.000 410.225,142.000 410.600 C 142.000 411.015,142.417 411.200,143.353 411.200 C 144.370 411.200,144.759 411.399,144.916 412.000 C 145.068 412.583,145.462 412.800,146.363 412.800 C 147.196 412.800,147.600 412.996,147.600 413.400 C 147.600 413.800,148.000 414.000,148.800 414.000 C 149.600 414.000,150.000 414.200,150.000 414.600 C 150.000 415.019,150.422 415.200,151.400 415.200 C 152.533 415.200,152.800 415.352,152.800 416.000 C 152.800 416.440,153.051 416.800,153.357 416.800 C 153.664 416.800,154.018 417.070,154.145 417.400 C 154.277 417.744,154.874 418.000,155.545 418.000 C 156.215 418.000,156.813 418.256,156.945 418.600 C 157.079 418.951,157.679 419.200,158.387 419.200 C 159.168 419.200,159.600 419.402,159.600 419.768 C 159.600 420.081,160.125 420.452,160.767 420.593 C 161.408 420.734,162.033 421.108,162.154 421.424 C 162.279 421.750,162.902 422.000,163.587 422.000 C 164.399 422.000,164.800 422.199,164.800 422.600 C 164.800 423.015,165.217 423.200,166.153 423.200 C 167.170 423.200,167.559 423.399,167.716 424.000 C 167.854 424.529,168.262 424.800,168.920 424.800 C 169.467 424.800,170.018 425.070,170.145 425.400 C 170.279 425.751,170.879 426.000,171.587 426.000 C 172.399 426.000,172.800 426.199,172.800 426.600 C 172.800 427.015,173.217 427.200,174.153 427.200 C 175.170 427.200,175.559 427.399,175.716 428.000 C 175.854 428.529,176.262 428.800,176.920 428.800 C 177.467 428.800,178.018 429.070,178.145 429.400 C 178.279 429.751,178.879 430.000,179.587 430.000 C 180.399 430.000,180.800 430.199,180.800 430.600 C 180.800 431.019,181.222 431.200,182.200 431.200 C 183.125 431.200,183.600 431.388,183.600 431.753 C 183.600 432.360,184.787 432.786,186.500 432.795 C 187.209 432.798,187.600 433.013,187.600 433.400 C 187.600 433.800,188.000 434.000,188.800 434.000 C 189.600 434.000,190.000 434.200,190.000 434.600 C 190.000 435.019,190.422 435.200,191.400 435.200 C 192.170 435.200,192.800 435.380,192.800 435.600 C 192.800 435.852,195.467 436.000,200.000 436.000 C 204.533 436.000,207.200 435.852,207.200 435.600 C 207.200 435.380,207.830 435.200,208.600 435.200 C 209.578 435.200,210.000 435.019,210.000 434.600 C 210.000 434.181,210.422 434.000,211.400 434.000 C 212.378 434.000,212.800 433.819,212.800 433.400 C 212.800 432.981,213.223 432.800,214.204 432.800 C 215.113 432.800,215.849 432.518,216.293 432.000 C 216.673 431.556,217.473 431.200,218.089 431.200 C 218.810 431.200,219.200 430.989,219.200 430.600 C 219.200 430.181,219.622 430.000,220.600 430.000 C 221.578 430.000,222.000 429.819,222.000 429.400 C 222.000 429.027,222.377 428.800,222.997 428.800 C 223.560 428.800,224.210 428.452,224.493 428.000 C 224.796 427.514,225.426 427.200,226.096 427.200 C 226.811 427.200,227.200 426.988,227.200 426.600 C 227.200 426.181,227.622 426.000,228.600 426.000 C 229.578 426.000,230.000 425.819,230.000 425.400 C 230.000 425.027,230.377 424.800,230.997 424.800 C 231.560 424.800,232.210 424.452,232.493 424.000 C 232.796 423.514,233.426 423.200,234.096 423.200 C 234.811 423.200,235.200 422.988,235.200 422.600 C 235.200 422.181,235.622 422.000,236.600 422.000 C 237.578 422.000,238.000 421.819,238.000 421.400 C 238.000 421.066,238.356 420.800,238.804 420.800 C 239.246 420.800,239.916 420.440,240.293 420.000 C 240.673 419.556,241.473 419.200,242.089 419.200 C 242.810 419.200,243.200 418.989,243.200 418.600 C 243.200 418.199,243.601 418.000,244.413 418.000 C 245.121 418.000,245.721 417.751,245.855 417.400 C 245.982 417.070,246.336 416.800,246.643 416.800 C 246.949 416.800,247.200 416.440,247.200 416.000 C 247.200 415.352,247.467 415.200,248.600 415.200 C 249.578 415.200,250.000 415.019,250.000 414.600 C 250.000 414.199,250.401 414.000,251.213 414.000 C 251.921 414.000,252.521 413.751,252.655 413.400 C 252.782 413.070,253.333 412.800,253.880 412.800 C 254.538 412.800,254.946 412.529,255.084 412.000 C 255.241 411.399,255.630 411.200,256.647 411.200 C 257.583 411.200,258.000 411.015,258.000 410.600 C 258.000 410.200,258.400 410.000,259.200 410.000 C 260.000 410.000,260.400 409.800,260.400 409.400 C 260.400 409.067,260.756 408.800,261.200 408.800 C 261.733 408.800,262.000 408.533,262.000 408.000 C 262.000 407.352,262.267 407.200,263.400 407.200 C 264.378 407.200,264.800 407.019,264.800 406.600 C 264.800 406.200,265.200 406.000,266.000 406.000 C 266.800 406.000,267.200 405.800,267.200 405.400 C 267.200 404.996,267.604 404.800,268.437 404.800 C 269.338 404.800,269.732 404.583,269.884 404.000 C 270.032 403.433,270.430 403.200,271.247 403.200 C 272.005 403.200,272.400 402.995,272.400 402.600 C 272.400 402.202,272.798 402.000,273.580 402.000 C 274.229 402.000,274.904 401.761,275.080 401.470 C 275.256 401.178,275.715 400.824,276.100 400.682 C 276.485 400.541,276.800 400.149,276.800 399.813 C 276.800 399.399,277.189 399.200,278.000 399.200 C 278.800 399.200,279.200 399.000,279.200 398.600 C 279.200 398.181,279.622 398.000,280.600 398.000 C 281.578 398.000,282.000 397.819,282.000 397.400 C 282.000 397.066,282.356 396.800,282.804 396.800 C 283.246 396.800,283.916 396.440,284.293 396.000 C 284.670 395.560,285.208 395.200,285.489 395.200 C 285.770 395.200,286.000 394.930,286.000 394.600 C 286.000 394.181,286.422 394.000,287.400 394.000 C 288.378 394.000,288.800 393.819,288.800 393.400 C 288.800 393.000,289.200 392.800,290.000 392.800 C 290.933 392.800,291.200 392.622,291.200 392.000 C 291.200 391.352,291.467 391.200,292.600 391.200 C 293.578 391.200,294.000 391.019,294.000 390.600 C 294.000 390.200,294.400 390.000,295.200 390.000 C 296.000 390.000,296.400 389.800,296.400 389.400 C 296.400 389.067,296.756 388.800,297.200 388.800 C 297.733 388.800,298.000 388.533,298.000 388.000 C 298.000 387.352,298.267 387.200,299.400 387.200 C 300.378 387.200,300.800 387.019,300.800 386.600 C 300.800 386.200,301.200 386.000,302.000 386.000 C 302.757 386.000,303.200 385.795,303.200 385.445 C 303.200 385.126,303.798 384.777,304.600 384.626 C 305.438 384.469,306.000 384.130,306.000 383.782 C 306.000 383.462,306.270 383.200,306.600 383.200 C 306.930 383.200,307.200 382.930,307.200 382.600 C 307.200 382.181,307.622 382.000,308.600 382.000 C 309.578 382.000,310.000 381.819,310.000 381.400 C 310.000 381.027,310.377 380.800,310.997 380.800 C 311.560 380.800,312.210 380.452,312.493 380.000 C 312.796 379.514,313.426 379.200,314.096 379.200 C 314.811 379.200,315.200 378.988,315.200 378.600 C 315.200 378.267,315.556 378.000,316.000 378.000 C 316.444 378.000,316.800 377.733,316.800 377.400 C 316.800 377.000,317.200 376.800,318.000 376.800 C 318.933 376.800,319.200 376.622,319.200 376.000 C 319.200 375.352,319.467 375.200,320.600 375.200 C 321.578 375.200,322.000 375.019,322.000 374.600 C 322.000 374.200,322.400 374.000,323.200 374.000 C 324.000 374.000,324.400 373.800,324.400 373.400 C 324.400 373.067,324.756 372.800,325.200 372.800 C 325.733 372.800,326.000 372.533,326.000 372.000 C 326.000 371.352,326.267 371.200,327.400 371.200 C 328.378 371.200,328.800 371.019,328.800 370.600 C 328.800 370.200,329.200 370.000,330.000 370.000 C 330.755 370.000,331.200 369.795,331.200 369.447 C 331.200 369.142,331.560 368.799,332.000 368.684 C 332.440 368.569,332.800 368.188,332.800 367.837 C 332.800 367.396,333.169 367.200,334.000 367.200 C 334.800 367.200,335.200 367.000,335.200 366.600 C 335.200 366.181,335.622 366.000,336.600 366.000 C 337.578 366.000,338.000 365.819,338.000 365.400 C 338.000 365.066,338.356 364.800,338.804 364.800 C 339.246 364.800,339.916 364.440,340.293 364.000 C 340.670 363.560,341.208 363.200,341.489 363.200 C 341.770 363.200,342.000 362.930,342.000 362.600 C 342.000 362.199,342.401 362.000,343.213 362.000 C 343.921 362.000,344.521 361.751,344.655 361.400 C 344.782 361.070,345.333 360.800,345.880 360.800 C 346.538 360.800,346.946 360.529,347.084 360.000 C 347.233 359.431,347.630 359.200,348.459 359.200 C 349.127 359.200,349.724 358.943,349.855 358.600 C 349.982 358.270,350.336 358.000,350.643 358.000 C 350.949 358.000,351.200 357.730,351.200 357.400 C 351.200 356.996,351.604 356.800,352.437 356.800 C 353.338 356.800,353.732 356.583,353.884 356.000 C 354.032 355.433,354.430 355.200,355.247 355.200 C 356.005 355.200,356.400 354.995,356.400 354.600 C 356.400 354.267,356.756 354.000,357.200 354.000 C 357.644 354.000,358.000 353.733,358.000 353.400 C 358.000 352.996,358.404 352.800,359.237 352.800 C 360.138 352.800,360.532 352.583,360.684 352.000 C 360.832 351.433,361.230 351.200,362.047 351.200 C 362.805 351.200,363.200 350.995,363.200 350.600 C 363.200 350.267,363.556 350.000,364.000 350.000 C 364.444 350.000,364.800 349.733,364.800 349.400 C 364.800 349.000,365.200 348.800,366.000 348.800 C 366.933 348.800,367.200 348.622,367.200 348.000 C 367.200 347.352,367.467 347.200,368.600 347.200 C 369.578 347.200,370.000 347.019,370.000 346.600 C 370.000 346.200,370.400 346.000,371.200 346.000 C 371.955 346.000,372.400 345.795,372.400 345.447 C 372.400 345.142,372.760 344.799,373.200 344.684 C 373.640 344.569,374.000 344.188,374.000 343.837 C 374.000 343.394,374.370 343.200,375.213 343.200 C 375.921 343.200,376.521 342.951,376.655 342.600 C 376.782 342.270,377.136 342.000,377.443 342.000 C 377.749 342.000,378.000 341.730,378.000 341.400 C 378.000 341.066,378.356 340.800,378.804 340.800 C 379.246 340.800,379.916 340.440,380.293 340.000 C 380.670 339.560,381.208 339.200,381.489 339.200 C 381.770 339.200,382.000 338.930,382.000 338.600 C 382.000 338.270,382.270 338.000,382.600 338.000 C 382.930 338.000,383.200 337.751,383.200 337.447 C 383.200 337.142,383.560 336.799,384.000 336.684 C 384.440 336.569,384.800 336.188,384.800 335.837 C 384.800 335.487,385.070 335.200,385.400 335.200 C 385.730 335.200,386.000 334.930,386.000 334.600 C 386.000 334.270,386.270 334.000,386.600 334.000 C 386.930 334.000,387.200 333.751,387.200 333.447 C 387.200 333.142,387.560 332.799,388.000 332.684 C 388.440 332.569,388.800 332.188,388.800 331.837 C 388.800 331.487,389.070 331.200,389.400 331.200 C 389.730 331.200,390.000 330.930,390.000 330.600 C 390.000 330.270,390.270 330.000,390.600 330.000 C 390.930 330.000,391.200 329.770,391.200 329.489 C 391.200 329.208,391.560 328.670,392.000 328.293 C 392.440 327.916,392.800 327.246,392.800 326.804 C 392.800 326.356,393.066 326.000,393.400 326.000 C 393.733 326.000,394.000 325.644,394.000 325.200 C 394.000 324.756,394.267 324.400,394.600 324.400 C 394.995 324.400,395.200 324.005,395.200 323.247 C 395.200 322.430,395.433 322.032,396.000 321.884 C 396.583 321.732,396.800 321.338,396.800 320.437 C 396.800 319.604,396.996 319.200,397.400 319.200 C 397.819 319.200,398.000 318.778,398.000 317.800 C 398.000 316.822,398.181 316.400,398.600 316.400 C 399.044 316.400,399.200 315.933,399.200 314.600 C 399.200 313.610,399.380 312.800,399.600 312.800 C 399.866 312.800,400.000 280.733,400.000 217.400 C 400.000 154.067,399.866 122.000,399.600 122.000 C 399.380 122.000,399.200 121.100,399.200 120.000 C 399.200 118.489,399.053 118.000,398.600 118.000 C 398.200 118.000,398.000 117.600,398.000 116.800 C 398.000 116.000,397.800 115.600,397.400 115.600 C 397.013 115.600,396.798 115.209,396.795 114.500 C 396.786 112.787,396.360 111.600,395.753 111.600 C 395.449 111.600,395.200 111.240,395.200 110.800 C 395.200 110.356,394.933 110.000,394.600 110.000 C 394.200 110.000,394.000 109.600,394.000 108.800 C 394.000 108.000,393.800 107.600,393.400 107.600 C 393.067 107.600,392.800 107.244,392.800 106.800 C 392.800 106.267,392.533 106.000,392.000 106.000 C 391.378 106.000,391.200 105.733,391.200 104.800 C 391.200 104.000,391.000 103.600,390.600 103.600 C 390.267 103.600,390.000 103.244,390.000 102.800 C 390.000 102.356,389.733 102.000,389.400 102.000 C 389.070 102.000,388.800 101.730,388.800 101.400 C 388.800 101.067,388.444 100.800,388.000 100.800 C 387.556 100.800,387.200 100.533,387.200 100.200 C 387.200 99.870,386.930 99.600,386.600 99.600 C 386.267 99.600,386.000 99.244,386.000 98.800 C 386.000 98.356,385.733 98.000,385.400 98.000 C 385.070 98.000,384.800 97.730,384.800 97.400 C 384.800 97.067,384.444 96.800,384.000 96.800 C 383.556 96.800,383.200 96.533,383.200 96.200 C 383.200 95.870,382.930 95.600,382.600 95.600 C 382.267 95.600,382.000 95.244,382.000 94.800 C 382.000 94.360,381.749 94.000,381.443 94.000 C 381.136 94.000,380.782 93.730,380.655 93.400 C 380.529 93.070,380.149 92.800,379.813 92.800 C 379.476 92.800,379.200 92.530,379.200 92.200 C 379.200 91.805,378.805 91.600,378.047 91.600 C 377.230 91.600,376.832 91.367,376.684 90.800 C 376.569 90.360,376.188 90.000,375.837 90.000 C 375.487 90.000,375.200 89.730,375.200 89.400 C 375.200 89.000,374.800 88.800,374.000 88.800 C 373.200 88.800,372.800 88.600,372.800 88.200 C 372.800 87.870,372.461 87.600,372.047 87.600 C 371.630 87.600,371.200 87.243,371.084 86.800 C 370.946 86.271,370.538 86.000,369.880 86.000 C 369.333 86.000,368.782 85.730,368.655 85.400 C 368.521 85.049,367.921 84.800,367.213 84.800 C 366.401 84.800,366.000 84.601,366.000 84.200 C 366.000 83.781,365.578 83.600,364.600 83.600 C 363.467 83.600,363.200 83.448,363.200 82.800 C 363.200 82.360,362.949 82.000,362.643 82.000 C 362.336 82.000,361.982 81.730,361.855 81.400 C 361.721 81.049,361.121 80.800,360.413 80.800 C 359.601 80.800,359.200 80.601,359.200 80.200 C 359.200 79.805,358.805 79.600,358.047 79.600 C 357.230 79.600,356.832 79.367,356.684 78.800 C 356.532 78.217,356.138 78.000,355.237 78.000 C 354.404 78.000,354.000 77.804,354.000 77.400 C 354.000 76.981,353.578 76.800,352.600 76.800 C 351.622 76.800,351.200 76.619,351.200 76.200 C 351.200 75.870,350.951 75.600,350.647 75.600 C 350.342 75.600,349.999 75.240,349.884 74.800 C 349.732 74.217,349.338 74.000,348.437 74.000 C 347.604 74.000,347.200 73.804,347.200 73.400 C 347.200 73.000,346.800 72.800,346.000 72.800 C 345.200 72.800,344.800 72.600,344.800 72.200 C 344.800 71.781,344.378 71.600,343.400 71.600 C 342.267 71.600,342.000 71.448,342.000 70.800 C 342.000 70.267,341.733 70.000,341.200 70.000 C 340.756 70.000,340.400 69.733,340.400 69.400 C 340.400 69.000,340.000 68.800,339.200 68.800 C 338.400 68.800,338.000 68.600,338.000 68.200 C 338.000 67.781,337.578 67.600,336.600 67.600 C 335.467 67.600,335.200 67.448,335.200 66.800 C 335.200 66.178,334.933 66.000,334.000 66.000 C 333.200 66.000,332.800 65.800,332.800 65.400 C 332.800 64.981,332.378 64.800,331.400 64.800 C 330.422 64.800,330.000 64.619,330.000 64.200 C 330.000 63.870,329.736 63.600,329.414 63.600 C 329.092 63.600,328.635 63.240,328.400 62.800 C 328.150 62.332,327.562 62.000,326.986 62.000 C 326.376 62.000,326.000 61.771,326.000 61.400 C 326.000 60.981,325.578 60.800,324.600 60.800 C 323.622 60.800,323.200 60.619,323.200 60.200 C 323.200 59.800,322.800 59.600,322.000 59.600 C 321.169 59.600,320.800 59.404,320.800 58.963 C 320.800 58.612,320.440 58.231,320.000 58.116 C 319.560 58.001,319.200 57.658,319.200 57.353 C 319.200 56.988,318.725 56.800,317.800 56.800 C 316.822 56.800,316.400 56.619,316.400 56.200 C 316.400 55.805,316.005 55.600,315.247 55.600 C 314.430 55.600,314.032 55.367,313.884 54.800 C 313.732 54.217,313.338 54.000,312.437 54.000 C 311.604 54.000,311.200 53.804,311.200 53.400 C 311.200 53.000,310.800 52.800,310.000 52.800 C 309.200 52.800,308.800 52.600,308.800 52.200 C 308.800 51.781,308.378 51.600,307.400 51.600 C 306.267 51.600,306.000 51.448,306.000 50.800 C 306.000 50.267,305.733 50.000,305.200 50.000 C 304.756 50.000,304.400 49.733,304.400 49.400 C 304.400 49.000,304.000 48.800,303.200 48.800 C 302.400 48.800,302.000 48.600,302.000 48.200 C 302.000 47.781,301.578 47.600,300.600 47.600 C 299.467 47.600,299.200 47.448,299.200 46.800 C 299.200 46.178,298.933 46.000,298.000 46.000 C 297.200 46.000,296.800 45.800,296.800 45.400 C 296.800 44.981,296.378 44.800,295.400 44.800 C 294.422 44.800,294.000 44.619,294.000 44.200 C 294.000 43.870,293.736 43.600,293.414 43.600 C 293.092 43.600,292.635 43.240,292.400 42.800 C 292.158 42.347,291.562 42.000,291.029 42.000 C 290.510 42.000,289.982 41.730,289.855 41.400 C 289.721 41.049,289.121 40.800,288.413 40.800 C 287.601 40.800,287.200 40.601,287.200 40.200 C 287.200 39.805,286.805 39.600,286.047 39.600 C 285.230 39.600,284.832 39.367,284.684 38.800 C 284.532 38.217,284.138 38.000,283.237 38.000 C 282.404 38.000,282.000 37.804,282.000 37.400 C 282.000 36.981,281.578 36.800,280.600 36.800 C 279.622 36.800,279.200 36.619,279.200 36.200 C 279.200 35.800,278.800 35.600,278.000 35.600 C 277.067 35.600,276.800 35.422,276.800 34.800 C 276.800 34.267,276.533 34.000,276.000 34.000 C 275.556 34.000,275.200 33.733,275.200 33.400 C 275.200 32.981,274.778 32.800,273.800 32.800 C 272.822 32.800,272.400 32.619,272.400 32.200 C 272.400 31.805,272.005 31.600,271.247 31.600 C 270.430 31.600,270.032 31.367,269.884 30.800 C 269.732 30.217,269.338 30.000,268.437 30.000 C 267.604 30.000,267.200 29.804,267.200 29.400 C 267.200 29.000,266.800 28.800,266.000 28.800 C 265.200 28.800,264.800 28.600,264.800 28.200 C 264.800 27.781,264.378 27.600,263.400 27.600 C 262.267 27.600,262.000 27.448,262.000 26.800 C 262.000 26.152,261.733 26.000,260.600 26.000 C 259.622 26.000,259.200 25.819,259.200 25.400 C 259.200 25.000,258.800 24.800,258.000 24.800 C 257.200 24.800,256.800 24.600,256.800 24.200 C 256.800 23.870,256.461 23.600,256.047 23.600 C 255.630 23.600,255.200 23.243,255.084 22.800 C 254.932 22.217,254.538 22.000,253.637 22.000 C 252.804 22.000,252.400 21.804,252.400 21.400 C 252.400 21.005,252.005 20.800,251.243 20.800 C 250.583 20.800,249.987 20.542,249.855 20.200 C 249.724 19.857,249.127 19.600,248.459 19.600 C 247.630 19.600,247.233 19.369,247.084 18.800 C 246.946 18.271,246.538 18.000,245.880 18.000 C 245.333 18.000,244.782 17.730,244.655 17.400 C 244.521 17.049,243.921 16.800,243.213 16.800 C 242.401 16.800,242.000 16.601,242.000 16.200 C 242.000 15.781,241.578 15.600,240.600 15.600 C 239.467 15.600,239.200 15.448,239.200 14.800 C 239.200 14.184,238.933 14.000,238.043 14.000 C 237.383 14.000,236.787 13.742,236.655 13.400 C 236.521 13.049,235.921 12.800,235.213 12.800 C 234.401 12.800,234.000 12.601,234.000 12.200 C 234.000 11.781,233.578 11.600,232.600 11.600 C 231.467 11.600,231.200 11.448,231.200 10.800 C 231.200 10.152,230.933 10.000,229.800 10.000 C 228.822 10.000,228.400 9.819,228.400 9.400 C 228.400 9.005,228.005 8.800,227.243 8.800 C 226.583 8.800,225.987 8.542,225.855 8.200 C 225.724 7.857,225.127 7.600,224.459 7.600 C 223.630 7.600,223.233 7.369,223.084 6.800 C 222.913 6.146,222.538 6.000,221.037 6.000 C 219.671 6.000,219.200 5.846,219.200 5.400 C 219.200 5.000,218.800 4.800,218.000 4.800 C 217.200 4.800,216.800 4.600,216.800 4.200 C 216.800 3.785,216.383 3.600,215.447 3.600 C 214.430 3.600,214.041 3.401,213.884 2.800 C 213.713 2.146,213.338 2.000,211.837 2.000 C 210.471 2.000,210.000 1.846,210.000 1.400 C 210.000 0.981,209.578 0.800,208.600 0.800 C 207.830 0.800,207.200 0.620,207.200 0.400 C 207.200 0.148,204.533 0.000,200.000 0.000 C 195.467 0.000,192.800 0.148,192.800 0.400 M203.590 23.647 C 204.586 24.103,205.940 24.716,206.600 25.008 C 217.346 29.761,234.498 38.327,252.000 47.680 C 253.430 48.444,257.120 50.385,260.200 51.994 C 263.280 53.602,266.014 55.085,266.276 55.288 C 266.538 55.492,267.888 56.248,269.276 56.969 C 272.717 58.755,277.425 61.302,279.600 62.554 C 280.590 63.123,281.670 63.713,282.000 63.864 C 282.330 64.015,284.220 65.033,286.200 66.127 C 288.180 67.220,290.970 68.752,292.400 69.532 C 293.830 70.312,295.720 71.356,296.600 71.854 C 297.480 72.351,299.280 73.326,300.600 74.019 C 301.920 74.713,303.180 75.416,303.400 75.582 C 303.755 75.850,305.883 77.035,311.000 79.817 C 311.880 80.295,313.320 81.097,314.200 81.599 C 320.142 84.988,328.453 89.600,328.618 89.600 C 328.727 89.600,329.577 90.085,330.508 90.677 C 331.439 91.269,333.010 92.198,334.000 92.741 C 334.990 93.284,336.520 94.147,337.400 94.659 C 338.280 95.171,339.270 95.715,339.600 95.869 C 340.214 96.155,346.517 99.739,347.600 100.418 C 347.930 100.625,349.190 101.340,350.400 102.008 C 351.610 102.676,353.320 103.638,354.200 104.147 C 355.080 104.656,356.659 105.539,357.710 106.109 C 367.815 111.600,375.497 120.479,377.859 129.400 C 379.003 133.722,379.016 301.702,377.872 305.270 C 375.645 312.218,369.201 319.858,361.914 324.192 C 361.536 324.416,358.885 325.995,356.023 327.700 C 353.161 329.405,350.741 330.800,350.645 330.800 C 350.548 330.800,349.509 331.434,348.335 332.210 C 347.161 332.985,345.480 333.992,344.600 334.447 C 342.645 335.458,341.889 335.901,339.681 337.325 C 338.735 337.935,337.565 338.609,337.081 338.823 C 336.596 339.037,335.660 339.565,335.000 339.996 C 334.340 340.427,332.810 341.326,331.600 341.993 C 330.390 342.660,329.130 343.384,328.800 343.601 C 327.679 344.339,309.799 354.677,306.992 356.210 C 305.456 357.049,303.480 358.189,302.600 358.744 C 300.702 359.940,297.477 361.779,295.800 362.622 C 295.140 362.954,294.060 363.578,293.400 364.008 C 292.740 364.439,291.750 365.016,291.200 365.291 C 290.650 365.565,288.400 366.847,286.200 368.139 C 284.000 369.431,281.840 370.648,281.400 370.843 C 280.960 371.038,280.330 371.374,280.000 371.590 C 278.750 372.406,268.547 378.139,267.400 378.670 C 266.740 378.975,265.660 379.567,265.000 379.984 C 264.340 380.401,263.170 381.082,262.400 381.498 C 259.890 382.854,254.637 385.736,253.000 386.655 C 250.773 387.906,249.859 388.408,246.200 390.389 C 244.440 391.342,242.010 392.660,240.800 393.317 C 234.001 397.010,222.422 403.091,219.800 404.344 C 215.442 406.428,213.748 407.268,213.200 407.616 C 212.870 407.825,210.620 408.913,208.200 410.033 C 205.780 411.153,203.060 412.413,202.156 412.835 C 200.127 413.780,200.019 413.779,197.911 412.827 C 196.970 412.402,195.930 411.953,195.600 411.830 C 195.270 411.706,194.730 411.444,194.400 411.246 C 194.070 411.049,188.670 408.336,182.400 405.218 C 176.130 402.100,169.200 398.590,167.000 397.418 C 164.800 396.246,161.830 394.669,160.400 393.913 C 157.791 392.534,155.182 391.114,152.200 389.450 C 151.320 388.959,149.067 387.732,147.194 386.723 C 142.627 384.264,140.231 382.940,137.600 381.422 C 136.390 380.724,135.130 380.028,134.800 379.876 C 134.470 379.723,133.120 378.963,131.800 378.187 C 130.480 377.411,128.860 376.507,128.200 376.179 C 127.540 375.850,125.920 374.950,124.600 374.179 C 123.280 373.407,121.660 372.506,121.000 372.175 C 120.340 371.845,119.260 371.226,118.600 370.800 C 117.940 370.374,116.860 369.753,116.200 369.421 C 115.540 369.088,114.730 368.645,114.400 368.435 C 114.070 368.225,112.180 367.130,110.200 366.000 C 108.220 364.870,106.330 363.786,106.000 363.591 C 105.670 363.396,103.870 362.395,102.000 361.366 C 100.130 360.338,98.510 359.385,98.400 359.249 C 98.290 359.112,97.570 358.660,96.800 358.245 C 93.054 356.223,91.704 355.468,90.600 354.777 C 89.940 354.364,88.860 353.750,88.200 353.414 C 87.540 353.077,86.460 352.443,85.800 352.005 C 85.140 351.567,84.330 351.089,84.000 350.942 C 83.670 350.795,80.844 349.173,77.720 347.338 C 74.596 345.502,71.950 344.000,71.840 344.000 C 71.730 344.000,70.866 343.482,69.920 342.848 C 68.974 342.215,67.300 341.215,66.200 340.627 C 63.976 339.437,63.473 339.147,60.616 337.408 C 57.702 335.634,57.065 335.262,56.400 334.948 C 55.835 334.681,52.686 332.797,50.977 331.703 C 50.549 331.430,49.210 330.660,48.000 329.993 C 46.790 329.326,45.260 328.427,44.600 327.996 C 43.940 327.565,43.040 327.025,42.600 326.796 C 42.160 326.568,41.080 325.944,40.200 325.410 C 39.320 324.875,38.330 324.303,38.000 324.138 C 32.047 321.159,24.632 312.372,22.358 305.600 C 21.203 302.160,21.193 132.757,22.348 128.961 C 23.692 124.540,26.470 119.476,28.844 117.116 C 29.223 116.740,29.773 116.105,30.066 115.705 C 31.630 113.576,38.965 107.877,42.555 106.000 C 45.510 104.455,47.640 103.272,52.600 100.420 C 55.020 99.029,59.340 96.558,62.200 94.929 C 65.060 93.301,67.670 91.805,68.000 91.606 C 68.330 91.406,69.410 90.799,70.400 90.256 C 71.390 89.712,73.010 88.806,74.000 88.241 C 74.990 87.676,76.160 87.050,76.600 86.851 C 77.040 86.652,79.260 85.388,81.533 84.044 C 83.806 82.700,85.758 81.600,85.872 81.600 C 85.986 81.600,87.608 80.700,89.477 79.600 C 91.346 78.500,92.962 77.600,93.068 77.600 C 93.174 77.600,94.552 76.845,96.130 75.923 C 97.709 75.000,100.136 73.664,101.524 72.952 C 102.912 72.241,104.262 71.488,104.524 71.280 C 104.786 71.071,106.440 70.143,108.200 69.217 C 109.960 68.291,112.480 66.913,113.800 66.155 C 115.120 65.397,116.740 64.505,117.400 64.175 C 118.060 63.844,119.320 63.163,120.200 62.662 C 121.080 62.161,123.780 60.691,126.200 59.395 C 128.620 58.100,131.320 56.636,132.200 56.144 C 133.080 55.651,134.880 54.702,136.200 54.035 C 137.520 53.368,140.220 51.919,142.200 50.815 C 144.180 49.711,146.880 48.259,148.200 47.588 C 149.520 46.917,151.680 45.820,153.000 45.151 C 154.320 44.481,155.670 43.764,156.000 43.558 C 156.330 43.352,158.220 42.363,160.200 41.360 C 162.180 40.356,165.600 38.568,167.800 37.385 C 170.000 36.201,172.160 35.064,172.600 34.856 C 173.040 34.648,175.920 33.275,179.000 31.803 C 183.784 29.517,187.655 27.689,193.400 25.002 C 195.122 24.196,197.669 23.092,198.600 22.747 C 199.693 22.343,201.432 22.656,203.590 23.647 \",\n  stroke: \"none\",\n  fill: \"#045c7c\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path3\",\n  d: \"M104.978 125.384 C 101.321 126.280,98.292 129.000,97.390 132.200 C 97.204 132.860,96.991 140.195,96.916 148.500 L 96.781 163.600 124.391 163.600 L 152.000 163.600 152.000 144.833 C 152.000 134.511,151.891 125.781,151.757 125.433 C 151.436 124.596,108.377 124.551,104.978 125.384 M163.200 144.200 L 163.200 163.600 233.400 163.600 L 303.600 163.600 303.600 149.014 C 303.600 133.581,303.644 134.010,301.680 130.200 C 300.482 127.875,298.153 126.205,294.948 125.370 C 293.099 124.888,282.744 124.800,227.980 124.800 L 163.200 124.800 163.200 144.200 M97.282 239.678 C 96.575 240.385,96.601 301.118,97.309 303.400 C 98.612 307.603,101.277 309.820,106.400 310.966 C 109.124 311.575,113.302 311.626,151.800 311.519 L 194.200 311.400 194.200 275.400 L 194.200 239.400 145.982 239.298 C 108.809 239.220,97.653 239.307,97.282 239.678 M205.843 239.833 C 205.476 240.788,205.564 310.523,205.932 311.104 C 206.438 311.900,291.735 311.590,294.800 310.781 C 298.750 309.738,301.866 306.995,302.620 303.896 C 302.768 303.289,303.049 302.694,303.244 302.573 C 304.044 302.078,303.676 240.593,302.869 239.862 C 301.769 238.867,206.224 238.839,205.843 239.833 \",\n  stroke: \"none\",\n  fill: \"#fafbfb\",\n  fillRule: \"evenodd\"\n}), React.createElement(\"path\", {\n  id: \"path4\",\n  d: \"M105.100 123.887 C 104.495 123.978,104.000 124.199,104.000 124.377 C 104.000 124.554,103.489 124.802,102.864 124.927 C 101.311 125.238,97.913 128.660,96.639 131.198 L 95.591 133.284 95.695 148.742 L 95.800 164.200 123.956 164.303 C 144.422 164.377,152.260 164.282,152.656 163.954 C 153.622 163.152,153.442 125.143,152.469 124.262 C 151.774 123.634,109.008 123.295,105.100 123.887 M162.672 123.861 C 162.523 124.011,162.418 124.598,162.440 125.167 L 162.480 126.200 162.758 125.200 L 163.036 124.200 227.618 124.088 C 300.821 123.960,296.698 123.760,300.385 127.613 C 303.889 131.273,304.025 132.105,303.905 149.026 L 303.800 163.800 233.100 163.800 C 194.215 163.800,162.400 163.935,162.400 164.101 C 162.400 164.267,194.305 164.357,233.300 164.301 L 304.200 164.200 304.305 148.637 C 304.395 135.300,304.323 132.942,303.805 132.151 C 303.472 131.643,303.200 130.921,303.200 130.545 C 303.200 129.648,299.221 125.846,297.083 124.701 L 295.400 123.800 229.172 123.694 C 192.747 123.636,162.822 123.711,162.672 123.861 M151.955 124.546 C 152.281 124.939,152.379 130.487,152.304 144.446 L 152.200 163.800 124.200 163.800 L 96.200 163.800 96.095 148.911 L 95.990 134.023 97.219 131.422 C 98.996 127.662,101.229 125.840,105.600 124.588 C 108.315 123.809,151.311 123.770,151.955 124.546 M96.480 174.480 C 95.786 175.174,95.786 228.026,96.480 228.720 C 96.851 229.091,120.456 229.200,200.290 229.200 L 303.620 229.200 304.010 228.174 C 304.744 226.242,304.518 175.375,303.771 174.629 C 302.940 173.797,97.310 173.650,96.480 174.480 M302.567 175.043 C 303.534 175.414,303.534 227.386,302.567 227.757 C 301.740 228.075,98.260 228.075,97.433 227.757 C 96.582 227.431,96.451 175.407,97.300 175.065 C 98.020 174.774,301.810 174.752,302.567 175.043 M96.080 238.880 C 95.113 239.847,95.420 302.467,96.400 304.296 C 96.840 305.116,97.200 305.997,97.200 306.251 C 97.200 306.506,97.470 306.818,97.800 306.945 C 98.130 307.071,98.400 307.451,98.400 307.787 C 98.400 308.124,98.569 308.400,98.775 308.400 C 98.982 308.400,99.747 308.947,100.475 309.615 C 101.204 310.283,102.238 310.941,102.773 311.076 C 103.309 311.212,104.209 311.565,104.773 311.859 C 106.506 312.764,194.498 312.646,195.251 311.739 C 195.707 311.189,195.800 305.051,195.800 275.400 C 195.800 245.749,195.707 239.611,195.251 239.061 C 194.538 238.202,96.937 238.023,96.080 238.880 M205.050 239.650 C 204.626 241.771,204.760 310.241,205.190 311.374 L 205.580 312.400 249.830 312.400 C 286.245 312.400,294.302 312.304,295.340 311.856 C 299.231 310.177,300.400 309.496,300.400 308.905 C 300.400 308.627,300.625 308.399,300.900 308.397 C 301.465 308.394,303.200 306.018,303.200 305.247 C 303.200 304.970,303.470 304.473,303.800 304.143 C 304.417 303.526,304.762 240.609,304.157 239.033 C 303.938 238.460,299.200 238.400,254.607 238.400 L 205.300 238.400 205.050 239.650 M194.786 239.574 C 195.062 240.090,195.200 252.002,195.200 275.400 C 195.200 298.798,195.062 310.710,194.786 311.226 C 194.111 312.487,108.941 312.430,104.781 311.167 C 101.189 310.076,98.857 308.045,97.222 304.584 L 96.000 301.998 96.000 271.425 C 96.000 252.528,96.149 240.460,96.390 239.826 L 96.780 238.800 145.576 238.800 C 193.410 238.800,194.380 238.815,194.786 239.574 M303.520 239.280 C 304.529 240.289,304.174 301.475,303.143 304.169 C 301.754 307.799,299.399 309.858,295.095 311.208 C 291.209 312.426,206.266 312.444,205.614 311.226 C 205.167 310.391,205.010 241.348,205.452 239.700 L 205.693 238.800 254.367 238.800 C 291.690 238.800,303.152 238.912,303.520 239.280 \",\n  stroke: \"none\",\n  fill: \"#44c4ec\",\n  fillRule: \"evenodd\"\n}));\n\nvar SvgLogo = function SvgLogo(props) {\n  return React.createElement(\"svg\", _extends({\n    id: \"svg\",\n    width: 400,\n    height: 436,\n    viewBox: \"0 0 400 436\"\n  }, props), _ref);\n};\n\nexport default __webpack_public_path__ + \"static/media/logo.3f7c6418.svg\";\nexport { SvgLogo as ReactComponent };","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport '../App.scss';\nimport Code from '../components/Code';\n\nconst CrossAxis = () => {\n  return (\n    <Flex direction=\"column\" grow={1}>\n      <Flex>\n        <Flex\n          className=\"container\"\n          spacing={{ xs: 10, es: 5 }}\n          alignItems=\"center\"\n          basis={50}\n          grow={1}\n          style={{ minHeight: 80 }}\n        >\n          <Flex spacing={[5, 10]} grow={1}>\n            <div className=\"item\">Item 1</div>\n          </Flex>\n          <Flex alignSelf=\"start\" spacing={[5, 10]} grow={1}>\n            <div className=\"item primary\">Item 2</div>\n          </Flex>\n          <Flex alignSelf=\"center\" spacing={[5, 10]} grow={1}>\n            <div className=\"item primary\">Item 3</div>\n          </Flex>\n          <Flex alignSelf=\"end\" spacing={[5, 10]} grow={1}>\n            <div className=\"item primary\">Item 4</div>\n          </Flex>\n          <Flex spacing={[5, 10]} grow={1}>\n            <div className=\"item\">Item 5</div>\n          </Flex>\n        </Flex>\n        <Flex basis={50} spacing={{ xs: 10, es: 5 }}>\n          <Code>\n            {`<Flex alignItems=\"center\">\n                <Flex>Item 1</Flex>\n                <Flex alignSelf=\"start\">Item 2</Flex>\n                <Flex alignSelf=\"center\">Item 3</Flex>\n                <Flex alignSelf=\"end\">Item 4</Flex>\n                <Flex>Item 5</Flex>\n              </Flex>`}\n          </Code>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst AlignSelf = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-align-self\">Flex Align Self</h2>\n      </Flex>\n      <Flex className=\"section\" spacing={[0, [10, 5]]}>\n        <CrossAxis/>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default AlignSelf;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst Example = ({ direction }) => {\n  return (\n    <Flex direction=\"column\">\n      <Flex gap={{ xs: 20, sm: 10, es: 5 }} wrap>\n        <Flex basis={{ xs: 100, gtEs: 50 }} grow={1}>\n          <Flex\n            className=\"container\"\n            justifyContent={direction || 'start'}\n            fill\n            wrap\n          >\n            {[...Array(4)].map((u, i) => (\n              <Flex key={i} spacing={[5, 10]}>\n                <div className=\"item primary\">Item {i + 1}</div>\n              </Flex>\n            ))}\n          </Flex>\n        </Flex>\n        <Flex basis={{ xs: 100, gtEs: 50 }} grow={1} wrap style={{ overflow: 'auto' }}>\n          <Code>\n            {`<Flex justifyContent=\"${direction || 'start'}\">\n              ...\n          </Flex>`}\n          </Code>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst JustifyContent = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-justify-content\">Flex Justify Content</h2>\n      </Flex>\n      <Flex direction=\"column\" className=\"section\" spacing={[0, [10, 5]]}>\n        <Example direction=\"start\" />\n        <Example direction=\"center\" />\n        <Example direction=\"end\" />\n        <Example direction=\"space-between\" />\n        <Example direction=\"space-around\" />\n        <Example direction=\"space-evenly\" />\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default JustifyContent;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst Example = ({ direction }) => {\n  return (\n    <Flex direction=\"column\">\n      <Flex gap={{ xs: 20, sm: 10, es: 5 }} wrap>\n        <Flex basis={50} grow={1} minSize={['auto', 150]}>\n          <Flex className=\"container\" alignItems={direction || 'start'} fill>\n            <Flex wrap>\n              {[...Array(4)].map((u, i) => (\n                <Flex key={i} spacing={{ gtEs: [5, 10], es: 5 }}>\n                  <div className=\"item primary\">Item {i + 1}</div>\n                </Flex>\n              ))}\n            </Flex>\n          </Flex>\n        </Flex>\n\n        <Flex basis={50} grow={1}>\n          <Code>\n            {`<Flex alignItems=\"${direction || 'start'}\">\n              ...\n          </Flex>`}\n          </Code>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst AlignItems = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-align-items\">Flex Align Items</h2>\n      </Flex>\n      <Flex direction=\"column\" className=\"section\" spacing={[0, [10, 5]]}>\n        <Example direction=\"start\" />\n        <Example direction=\"center\" />\n        <Example direction=\"end\" />\n        <Example direction=\"baseline\" />\n        <Example direction=\"stretch\" />\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default AlignItems;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst Example = ({ align }) => {\n  return (\n    <Flex direction=\"column\">\n      <Flex>\n        <Flex\n          className=\"container\"\n          basis={50}\n          spacing={{ xs: 10, es: 5 }}\n          alignContent={align || 'start'}\n          alignItems=\"start\"\n          grow={1}\n          wrap\n        >\n          {[...Array(9)].map((u, i) => (\n            <Flex key={i} spacing={[0, 0]} basis={33.333}>\n              <Flex spacing={[0, 5]} fill>\n                <div className=\"item primary full-width\">Item {i + 1}</div>\n              </Flex>\n            </Flex>\n          ))}\n        </Flex>\n        <Flex spacing={{ xs: 10, es: 5 }} basis={50}>\n          <Code>\n            {`<Flex wrap\n                   alignItems=\"start\"\n                   alignContent=\"${align || 'start'}\">\n              <div>Item 1</div>\n              <div>Item 2</div>\n              <div>Item 3</div>\n              ...\n              <div>Item 9</div>\n            </Flex>`}\n          </Code>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst AlignContent = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-align-content\">Flex Align Content</h2>\n      </Flex>\n      <Flex direction=\"column\" className=\"section\" spacing={[0, [10, 5]]}>\n        <Example align=\"start\"/>\n        <Example align=\"center\"/>\n        <Example align=\"end\"/>\n        <Example align=\"space-between\"/>\n        <Example align=\"space-around\"/>\n        <Example align=\"stretch\"/>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default AlignContent;\n","import React, { Fragment } from 'react';\nimport Flex from '../../lib';\nimport Code from '../components/Code';\n\nconst DirectionRow = () => {\n  return (\n    <Flex direction=\"column\" basis={50}>\n      <Flex className=\"container\" grow={1} spacing={{ xs:10, es: 5 }}>\n        <Flex gap={10} fill wrap>\n          {[...Array(12)].map((u, i) => (\n            <Flex key={i} basis={25}>\n              <div className=\"item primary full-width\">Item {i + 1}</div>\n            </Flex>\n          ))}\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst DirectionColumn = () => {\n  return (\n    <Flex direction=\"column\" basis={50}>\n      <Flex spacing={{ xs: 10, es: 5 }} grow={1}>\n        <Code>\n          {`<Flex gap={10} wrap>\n              <Flex basis={25}>Item 1</Flex>\n              <Flex basis={25}>Item 2</Flex>\n              <Flex basis={25}>Item 3</Flex>\n              ...\n              <Flex basis={25}>Item 12</Flex>\n            </Flex>`}\n        </Code>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst Gap = () => {\n  return (\n    <Fragment>\n      <Flex spacing={['40px 0 20px 0', 0]}>\n        <h2 id=\"flex-shrink\">Gap</h2>\n      </Flex>\n      <Flex direction=\"column\" className=\"section\" spacing={[0, [10, 5]]}>\n        <Flex>\n          <DirectionRow/>\n          <DirectionColumn/>\n        </Flex>\n      </Flex>\n    </Fragment>\n  );\n};\n\nexport default Gap;\n","import React from 'react';\nimport Flex from '../lib';\nimport './App.scss';\nimport Direction from './examples/Direction';\nimport Align from './examples/Align';\nimport Wrap from './examples/Wrap';\nimport Grow from './examples/Grow';\nimport Shrink from './examples/Shrink';\nimport Basis from './examples/Basis';\nimport { ReactComponent as Logo } from './logo.svg';\nimport AlignSelf from './examples/AlignSelf';\nimport JustifyContent from './examples/JustifyContent';\nimport AlignItems from './examples/AlignItems';\nimport AlignContent from './examples/AlignContent';\nimport Gap from './examples/Gap';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Flex className=\"nav\" spacing={[0, [30, 20]]} align=\"space-between\">\n        <Flex align={['start', 'center']}>\n          <Logo className=\"logo\" />\n          <div className=\"title\">React Flex</div>\n        </Flex>\n        <Flex align={['end', 'center']} show={{ xs: false, gtEs: true }}>\n          <Flex spacing={[0, 10]}>Static</Flex>\n          <Flex spacing={[0, 10]}>Responsive</Flex>\n          <Flex spacing={[0, 10]}>Github</Flex>\n        </Flex>\n      </Flex>\n      <Flex\n        style={{ overflow: 'auto', display: 'block' }}\n        direction=\"column\"\n        fill\n      >\n        <Flex className=\"main\" direction=\"column\">\n          <Direction />\n          <JustifyContent />\n          <AlignItems />\n          <AlignSelf />\n          <Wrap />\n          <AlignContent />\n          <Basis />\n          <Grow />\n          <Shrink />\n\n          <Align />\n          <Gap />\n        </Flex>\n      </Flex>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__33__;"],"sourceRoot":""}